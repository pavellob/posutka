'use client'

import { useState } from 'react'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import { Dialog, DialogTitle, DialogDescription, DialogBody, DialogActions } from '@/components/dialog'
import { Button } from '@/components/button'
import { Input } from '@/components/input'
import { Textarea } from '@/components/textarea'
import { Select } from '@/components/select'
import { Fieldset, Field, Label } from '@/components/fieldset'
import { Switch } from '@/components/switch'
import { graphqlClient } from '@/lib/graphql-client'

const CREATE_PROPERTY = `
  mutation CreateProperty($orgId: String!, $title: String!, $address: String!, $propertyType: String, $category: String, $isElite: Boolean) {
    createProperty(orgId: $orgId, title: $title, address: $address, propertyType: $propertyType, category: $category, isElite: $isElite) {
      id
      title
      address
      propertyType
      category
      isElite
    }
  }
`

type CreatePropertyDialogProps = {
  open: boolean
  onClose: () => void
  onSuccess?: () => void
  orgId: string
}

export function CreatePropertyDialog({ open, onClose, onSuccess, orgId }: CreatePropertyDialogProps) {
  const [formData, setFormData] = useState({
    title: '',
    address: '',
    propertyType: '',
    category: '',
    description: '',
    isElite: false,
  })

  const queryClient = useQueryClient()

  const createPropertyMutation = useMutation({
    mutationFn: async (data: any) => {
      console.log('Creating property with data:', {
        orgId,
        title: data.title,
        address: data.address,
        propertyType: data.propertyType || null,
        category: data.category || null,
        isElite: data.isElite
      })
      
      const variables: any = {
        orgId,
        title: data.title,
        address: data.address,
        isElite: data.isElite
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
      if (data.propertyType) {
        variables.propertyType = data.propertyType
      }
      if (data.category) {
        variables.category = data.category
      }
      
      return await graphqlClient.request(CREATE_PROPERTY, variables)
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['properties'] })
      onSuccess?.()
      onClose()
      setFormData({
        title: '',
        address: '',
        propertyType: '',
        category: '',
        description: '',
        isElite: false,
      })
    },
    onError: (error: any) => {
      console.error('Failed to create property:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    }
  })

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!orgId) {
      alert('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
      return
    }
    
    createPropertyMutation.mutate(formData)
  }

  const handleInputChange = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</DialogTitle>
      <DialogDescription>
        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
      </DialogDescription>
      
      <form onSubmit={handleSubmit}>
        <DialogBody>
          <Fieldset>
            <Field>
              <Label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ *</Label>
              <Input
                id="title"
                value={formData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–ö '–°–æ–ª–Ω–µ—á–Ω—ã–π'"
                required
              />
            </Field>

            <Field>
              <Label htmlFor="address">–ê–¥—Ä–µ—Å *</Label>
              <Input
                id="address"
                value={formData.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 123"
                required
              />
            </Field>

            <Field>
              <Label htmlFor="propertyType">–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞</Label>
              <Select
                id="propertyType"
                value={formData.propertyType}
                onChange={(e) => handleInputChange('propertyType', e.target.value)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                <option value="APARTMENT">–ö–≤–∞—Ä—Ç–∏—Ä–∞</option>
                <option value="HOUSE">–î–æ–º</option>
                <option value="COMMERCIAL">–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</option>
                <option value="HOTEL">–û—Ç–µ–ª—å</option>
                <option value="HOSTEL">–•–æ—Å—Ç–µ–ª</option>
              </Select>
            </Field>

            <Field>
              <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
              <Input
                id="category"
                value={formData.category}
                onChange={(e) => handleInputChange('category', e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –≠–ª–∏—Ç–Ω–æ–µ –∂–∏–ª—å–µ"
              />
            </Field>

            <Field>
              <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
              <Textarea
                id="description"
                value={formData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ"
                rows={3}
              />
            </Field>

            <Field>
              <div className="flex items-center justify-between">
                <Label htmlFor="isElite">–≠–ª–∏—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç</Label>
                <Switch
                  id="isElite"
                  checked={formData.isElite}
                  onChange={(checked) => handleInputChange('isElite', checked)}
                />
              </div>
            </Field>
          </Fieldset>
        </DialogBody>

        <DialogActions>
          <Button outline onClick={onClose} disabled={createPropertyMutation.isPending}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            type="submit" 
            disabled={createPropertyMutation.isPending || !formData.title || !formData.address}
            className="bg-blue-600 hover:bg-blue-700 text-white"
          >
            {createPropertyMutation.isPending ? '–°–æ–∑–¥–∞–µ–º...' : 'üè¢ –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  )
}