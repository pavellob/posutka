'use client'

import { useState, useEffect } from 'react'
import { Heading } from '@/components/heading'
import { Text } from '@/components/text'
import { Badge } from '@/components/badge'
import { Button } from '@/components/button'
import { 
  Table, 
  TableHead, 
  TableBody, 
  TableRow, 
  TableHeader, 
  TableCell 
} from '@/components/table'
import { graphqlRequest } from '@/lib/graphql-wrapper'
import { gql } from 'graphql-request'

// GraphQL –∑–∞–ø—Ä–æ—Å—ã
const GET_USER_STATS = gql`
  query GetUserStats {
    userStats {
      totalUsers
      activeUsers
      lockedUsers
      onlineUsers
      newUsers
      usersByRole {
        role
        count
      }
    }
  }
`

const GET_USERS = gql`
  query GetUsers($first: Int, $after: String) {
    usersAdvanced(first: $first, after: $after) {
      edges {
        node {
          id
          email
          name
          createdAt
          status
          systemRoles
          lastLoginAt
          isLocked
        }
      }
      pageInfo {
        hasNextPage
        hasPreviousPage
        startCursor
        endCursor
      }
    }
  }
`

export default function IAMPage() {
  const [stats, setStats] = useState<any>(null)
  const [users, setUsers] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true)
        setError(null)

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const statsResult = await graphqlRequest(GET_USER_STATS)
        setStats(statsResult.userStats)

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const usersResult = await graphqlRequest(GET_USERS, { first: 20 })
        setUsers(usersResult.usersAdvanced.edges.map((edge: any) => edge.node))

      } catch (err: any) {
        console.error('Failed to fetch IAM data:', err)
        setError(err.message)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  if (loading) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
          <p className="mt-2 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö IAM...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="text-center">
          <p className="text-red-600">–û—à–∏–±–∫–∞: {error}</p>
          <Button 
            onClick={() => window.location.reload()}
            className="mt-2"
          >
            –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div>
        <Heading level={1}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º</Heading>
        <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —Ä–æ–ª—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–µ
        </Text>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üë•</span>
            </div>
            <Heading level={3}>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Heading>
          </div>
          <Text className="text-2xl font-bold text-blue-600">
            {stats?.totalUsers || 0}
          </Text>
          <Text className="text-sm text-zinc-500">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</Text>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üîë</span>
            </div>
            <Heading level={3}>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</Heading>
          </div>
          <Text className="text-2xl font-bold text-green-600">
            {stats?.onlineUsers || 0}
          </Text>
          <Text className="text-sm text-zinc-500">–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω</Text>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üõ°Ô∏è</span>
            </div>
            <Heading level={3}>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</Heading>
          </div>
          <Text className="text-2xl font-bold text-orange-600">
            {stats?.usersByRole?.find((r: any) => r.role === 'ADMIN')?.count || 0}
          </Text>
          <Text className="text-sm text-zinc-500">–° —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏</Text>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-red-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">‚ö†Ô∏è</span>
            </div>
            <Heading level={3}>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</Heading>
          </div>
          <Text className="text-2xl font-bold text-red-600">
            {stats?.lockedUsers || 0}
          </Text>
          <Text className="text-sm text-zinc-500">–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</Text>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700">
        <div className="px-6 py-4 border-b border-zinc-200 dark:border-zinc-700">
          <Heading level={2}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</Heading>
          <Text className="text-sm text-zinc-500">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–æ–ª—è–º–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
          </Text>
        </div>
        
        <Table striped>
          <TableHead>
            <TableRow>
              <TableHeader>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHeader>
              <TableHeader>Email</TableHeader>
              <TableHeader>–°—Ç–∞—Ç—É—Å</TableHeader>
              <TableHeader>–†–æ–ª–∏</TableHeader>
              <TableHeader>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥</TableHeader>
              <TableHeader>–î–µ–π—Å—Ç–≤–∏—è</TableHeader>
            </TableRow>
          </TableHead>
          <TableBody>
            {users.map((user) => (
              <TableRow key={user.id}>
                <TableCell>
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                      <span className="text-white font-semibold text-sm">
                        {user.name?.charAt(0)?.toUpperCase() || 'U'}
                      </span>
                    </div>
                    <div>
                      <Text className="font-medium">{user.name || 'No name'}</Text>
                      <Text className="text-sm text-zinc-500">
                        ID: {user.id.slice(0, 8)}...
                      </Text>
                    </div>
                  </div>
                </TableCell>
                <TableCell>
                  <Text className="font-mono text-sm">{user.email}</Text>
                </TableCell>
                <TableCell>
                  <Badge 
                    color={user.isLocked ? 'red' : user.status === 'ACTIVE' ? 'green' : 'yellow'}
                  >
                    {user.isLocked ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : user.status === 'ACTIVE' ? '–ê–∫—Ç–∏–≤–µ–Ω' : user.status || '–ê–∫—Ç–∏–≤–µ–Ω'}
                  </Badge>
                </TableCell>
                <TableCell>
                  <div className="flex gap-1">
                    {user.systemRoles?.map((role: string) => (
                      <Badge key={role} color="blue" className="text-xs">
                        {role}
                      </Badge>
                    )) || <Text className="text-sm text-zinc-500">–ù–µ—Ç —Ä–æ–ª–µ–π</Text>}
                  </div>
                </TableCell>
                <TableCell>
                  <Text className="text-sm text-zinc-500">
                    {user.lastLoginAt 
                      ? new Date(user.lastLoginAt).toLocaleDateString()
                      : '–ù–∏–∫–æ–≥–¥–∞'
                    }
                  </Text>
                </TableCell>
                <TableCell>
                  <div className="flex gap-2">
                    <Button color="blue">
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    <Button color="red">
                      –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      {/* –†–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <Heading level={2} className="mb-4">–†–æ–ª–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Heading>
          <div className="space-y-3">
            {stats?.usersByRole?.map((roleStat: any) => (
              <div key={roleStat.role} className="flex items-center justify-between py-3 border-b border-zinc-100 dark:border-zinc-700">
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                    <span className="text-white font-semibold text-sm">
                      {roleStat.role === 'ADMIN' ? 'üëë' : 
                       roleStat.role === 'MANAGER' ? '‚ö°' : 
                       roleStat.role === 'USER' ? 'üë§' : 'üë•'}
                    </span>
                  </div>
                  <div>
                    <Text className="font-medium">{roleStat.role}</Text>
                    <Text className="text-sm text-zinc-500">
                      {roleStat.role === 'ADMIN' ? '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ' :
                       roleStat.role === 'MANAGER' ? '–î–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é' :
                       roleStat.role === 'USER' ? '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø' : '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø'}
                    </Text>
                  </div>
                </div>
                <Badge color="blue">{roleStat.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Badge>
              </div>
            )) || (
              <Text className="text-zinc-500">–î–∞–Ω–Ω—ã–µ –æ —Ä–æ–ª—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</Text>
            )}
          </div>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <Heading level={2} className="mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</Heading>
          <div className="space-y-3">
            <Button className="w-full justify-start" color="blue">
              ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </Button>
            <Button className="w-full justify-start" color="green">
              üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            </Button>
            <Button className="w-full justify-start" color="orange">
              üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            </Button>
            <Button className="w-full justify-start" color="red">
              üõ°Ô∏è –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
