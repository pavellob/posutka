'use client'

import { Heading } from '@/components/heading'
import { Text } from '@/components/text'
import { Badge } from '@/components/badge'
import React, { useState } from 'react'
import { useGetPropertiesByOrgQuery, useGetUnitsByPropertyQuery, useGetAllOrganizationsQuery } from '@/lib/generated/graphql'
import { graphqlClient } from '@/lib/graphql-client'

export default function InventoryPage() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  const [selectedPropertyId, setSelectedPropertyId] = useState<string | null>(null)
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  const { data: organizationsData, isLoading: organizationsLoading, error: organizationsError } = useGetAllOrganizationsQuery(
    graphqlClient
  )
  
  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  const [allProperties, setAllProperties] = useState<any[]>([])
  const [isLoadingProperties, setIsLoadingProperties] = useState(false)
  const [propertiesError, setPropertiesError] = useState<Error | null>(null)
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  React.useEffect(() => {
    console.log('Organizations data:', organizationsData)
    if (organizationsData?.organizations?.edges) {
      console.log('Found organizations:', organizationsData.organizations.edges.length)
      setIsLoadingProperties(true)
      setPropertiesError(null)
      
      const fetchAllProperties = async () => {
        try {
          const propertiesPromises = organizationsData.organizations.edges.map(async (orgEdge) => {
            const orgId = orgEdge.node.id
            // –ó–¥–µ—Å—å –º—ã –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ useGetPropertiesByOrgQuery –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö—É–∫–∏ –≤ —Ü–∏–∫–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            const response = await graphqlClient.request(`
              query GetPropertiesByOrg($orgId: UUID!) {
                propertiesByOrgId(orgId: $orgId) {
                  id
                  title
                  address
                  amenities
                  org {
                    id
                    name
                  }
                }
              }
            `, { orgId }) as any
            return response.propertiesByOrgId
          })
          
          const allPropertiesArrays = await Promise.all(propertiesPromises)
          const flattenedProperties = allPropertiesArrays.flat()
          console.log('All properties found:', flattenedProperties.length)
          setAllProperties(flattenedProperties)
        } catch (error) {
          console.error('Error fetching properties:', error)
          setPropertiesError(error as Error)
        } finally {
          setIsLoadingProperties(false)
        }
      }
      
      fetchAllProperties()
    }
  }, [organizationsData])
  
  const { data: unitsData, isLoading: unitsLoading } = useGetUnitsByPropertyQuery(
    graphqlClient,
    {
      propertyId: selectedPropertyId || ''
    },
    {
      enabled: !!selectedPropertyId,
      queryKey: ['units', selectedPropertyId]
    }
  )
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const firstProperty = allProperties?.[0]
  if (firstProperty && !selectedPropertyId) {
    setSelectedPropertyId(firstProperty.id)
  }
  
  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const totalProperties = allProperties?.length || 0
  const totalUnits = unitsData?.unitsByPropertyId?.length || 0
  const availableUnits = unitsData?.unitsByPropertyId?.filter(unit => unit)?.length || 0

  if (organizationsLoading || isLoadingProperties) {
    return (
      <div className="space-y-6">
        <div>
          <Heading level={1}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º</Heading>
          <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
            –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
          </Text>
        </div>
      </div>
    )
  }

  if (organizationsError || propertiesError) {
    return (
      <div className="space-y-6">
        <div>
          <Heading level={1}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º</Heading>
          <Text className="mt-2 text-red-600 dark:text-red-400">
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {organizationsError?.message || propertiesError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
          </Text>
        </div>
      </div>
    )
  }


  return (
    <div className="space-y-6">
      <div>
        <Heading level={1}>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º</Heading>
        <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∏–∑ –≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        </Text>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üè¢</span>
            </div>
            <Heading level={3}>–û–±—ä–µ–∫—Ç—ã</Heading>
          </div>
          <Text className="text-2xl font-bold text-blue-600">{totalProperties}</Text>
          <Text className="text-sm text-zinc-500">–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</Text>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üè†</span>
            </div>
            <Heading level={3}>–ï–¥–∏–Ω–∏—Ü—ã</Heading>
          </div>
          <Text className="text-2xl font-bold text-green-600">{totalUnits}</Text>
          <Text className="text-sm text-zinc-500">–î–æ—Å—Ç—É–ø–Ω–æ</Text>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üõèÔ∏è</span>
            </div>
            <Heading level={3}>–ö—Ä–æ–≤–∞—Ç–∏</Heading>
          </div>
          <Text className="text-2xl font-bold text-orange-600">
            {unitsData?.unitsByPropertyId?.reduce((sum, unit) => sum + unit.beds, 0) || 0}
          </Text>
          <Text className="text-sm text-zinc-500">–í—Å–µ–≥–æ –º–µ—Å—Ç</Text>
        </div>

        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700 p-6">
          <div className="flex items-center gap-3 mb-4">
            <div className="w-8 h-8 bg-purple-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-semibold text-sm">üë•</span>
            </div>
            <Heading level={3}>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</Heading>
          </div>
          <Text className="text-2xl font-bold text-purple-600">
            {unitsData?.unitsByPropertyId?.reduce((sum, unit) => sum + unit.capacity, 0) || 0}
          </Text>
          <Text className="text-sm text-zinc-500">–ì–æ—Å—Ç–µ–π</Text>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */}
      <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700">
        <div className="p-6 border-b border-zinc-200 dark:border-zinc-700">
          <Heading level={2}>–û–±—ä–µ–∫—Ç—ã –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</Heading>
          <Text className="text-zinc-600 dark:text-zinc-400">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
          </Text>
        </div>
        <div className="p-6">
          {allProperties?.length === 0 ? (
            <div className="text-center py-8">
              <div className="max-w-md mx-auto">
                <div className="w-16 h-16 bg-zinc-100 dark:bg-zinc-800 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üè¢</span>
                </div>
                <Heading level={3} className="mb-2">–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</Heading>
                <Text className="text-zinc-500 mb-4">
                  –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –°–æ–∑–¥–∞–π—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
                </Text>
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                  <Text className="text-sm text-blue-800 dark:text-blue-200">
                    <strong>–°–æ–≤–µ—Ç:</strong> –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code className="bg-blue-100 dark:bg-blue-800 px-1 rounded">./scripts/migrate-and-seed.sh</code> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                  </Text>
                </div>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {allProperties?.map((property) => (
                <div
                  key={property.id}
                  className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                    selectedPropertyId === property.id
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-zinc-200 dark:border-zinc-700 hover:border-zinc-300 dark:hover:border-zinc-600'
                  }`}
                  onClick={() => setSelectedPropertyId(property.id)}
                >
                  <div className="flex items-start justify-between mb-2">
                    <Heading level={4} className="text-lg">{property.title}</Heading>
                    {selectedPropertyId === property.id && (
                      <Badge color="blue">–í—ã–±—Ä–∞–Ω–æ</Badge>
                    )}
                  </div>
                  <Text className="text-sm text-zinc-600 dark:text-zinc-400 mb-3">
                    {property.address}
                  </Text>
                  {property.amenities && property.amenities.length > 0 && (
                    <div className="flex flex-wrap gap-1">
                      {property.amenities.slice(0, 3).map((amenity: string, index: number) => (
                        <Badge key={index} color="zinc" className="text-xs">
                          {amenity}
                        </Badge>
                      ))}
                      {property.amenities.length > 3 && (
                        <Badge color="zinc" className="text-xs">
                          +{property.amenities.length - 3}
                        </Badge>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –µ–¥–∏–Ω–∏—Ü –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ */}
      {selectedPropertyId && (
        <div className="bg-white dark:bg-zinc-800 rounded-lg border border-zinc-200 dark:border-zinc-700">
          <div className="p-6 border-b border-zinc-200 dark:border-zinc-700">
            <Heading level={2}>–ï–¥–∏–Ω–∏—Ü—ã –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</Heading>
            <Text className="text-zinc-600 dark:text-zinc-400">
              –ï–¥–∏–Ω–∏—Ü—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            </Text>
          </div>
          <div className="p-6">
            {unitsLoading ? (
              <div className="text-center py-8">
                <Text className="text-zinc-500">–ó–∞–≥—Ä—É–∑–∫–∞ –µ–¥–∏–Ω–∏—Ü...</Text>
              </div>
            ) : unitsData?.unitsByPropertyId?.length === 0 ? (
              <div className="text-center py-8">
                <Text className="text-zinc-500">–ù–µ—Ç –µ–¥–∏–Ω–∏—Ü –≤ —ç—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ</Text>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {unitsData?.unitsByPropertyId?.map((unit) => (
                  <div
                    key={unit.id}
                    className="p-4 border border-zinc-200 dark:border-zinc-700 rounded-lg hover:border-zinc-300 dark:hover:border-zinc-600 transition-colors"
                  >
                    <div className="flex items-start justify-between mb-2">
                      <Heading level={4} className="text-lg">{unit.name}</Heading>
                      <Badge color="green">–î–æ—Å—Ç—É–ø–Ω–æ</Badge>
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <Text className="text-zinc-500">–ö—Ä–æ–≤–∞—Ç–∏:</Text>
                        <Text className="font-medium">{unit.beds}</Text>
                      </div>
                      <div>
                        <Text className="text-zinc-500">–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</Text>
                        <Text className="font-medium">{unit.capacity}</Text>
                      </div>
                      <div>
                        <Text className="text-zinc-500">–í–∞–Ω–Ω—ã–µ:</Text>
                        <Text className="font-medium">{unit.bathrooms}</Text>
                      </div>
                      <div>
                        <Text className="text-zinc-500">–£–¥–æ–±—Å—Ç–≤–∞:</Text>
                        <Text className="font-medium">{unit.amenities?.length || 0}</Text>
                      </div>
                    </div>
                    {unit.amenities && unit.amenities.length > 0 && (
                      <div className="mt-3 pt-3 border-t border-zinc-200 dark:border-zinc-700">
                        <div className="flex flex-wrap gap-1">
                          {unit.amenities.slice(0, 2).map((amenity: string, index: number) => (
                            <Badge key={index} color="zinc" className="text-xs">
                              {amenity}
                            </Badge>
                          ))}
                          {unit.amenities.length > 2 && (
                            <Badge color="zinc" className="text-xs">
                              +{unit.amenities.length - 2}
                            </Badge>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}
