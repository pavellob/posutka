'use client'

import { useState } from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { useRouter } from 'next/navigation'
import { Heading } from '@/components/heading'
import { Text } from '@/components/text'
import { Badge } from '@/components/badge'
import { Button } from '@/components/button'
import { Table, TableHead, TableBody, TableRow, TableHeader, TableCell } from '@/components/table'
import { graphqlClient } from '@/lib/graphql-client'
import { useCurrentOrganization } from '@/hooks/useCurrentOrganization'
import { CreateCleanerDialog } from '@/components/create-cleaner-dialog'
import { 
  GET_CLEANERS,
  UPDATE_CLEANER,
  DEACTIVATE_CLEANER
} from '@/lib/graphql-queries'

export default function CleanersPage() {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false)
  const router = useRouter()
  
  const queryClient = useQueryClient()
  const { currentOrgId, isLoading: orgLoading } = useCurrentOrganization()
  const orgId = currentOrgId

  // –ó–∞–ø—Ä–æ—Å —É–±–æ—Ä—â–∏–∫–æ–≤
  const { data: cleanersData, isLoading: cleanersLoading } = useQuery<any>({
    queryKey: ['cleaners', orgId],
    queryFn: () => graphqlClient.request(GET_CLEANERS, {
      orgId: orgId!,
      first: 100
    }),
    enabled: !!orgId
  })

  // –ú—É—Ç–∞—Ü–∏—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  const deactivateCleanerMutation = useMutation({
    mutationFn: (id: string) => graphqlClient.request(DEACTIVATE_CLEANER, { id }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['cleaners'] })
    },
    onError: (error: any) => {
      alert(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–±–æ—Ä—â–∏–∫–∞'}`)
    }
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —É–±–æ—Ä—â–∏–∫–∞
  const handleCleanerClick = (cleanerId: string) => {
    router.push(`/cleaners/${cleanerId}`)
  }

  if (orgLoading || !orgId) {
    return (
      <div className="space-y-6">
        <div>
          <Heading level={1}>–£–±–æ—Ä—â–∏–∫–∏</Heading>
          <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
            –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...
          </Text>
        </div>
      </div>
    )
  }

  if (cleanersLoading) {
    return (
      <div className="space-y-6">
        <Heading level={1}>–£–±–æ—Ä—â–∏–∫–∏</Heading>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </div>
    )
  }

  const cleaners = cleanersData?.cleaners?.edges?.map((edge: any) => edge.node) || []
  const activeCleaners = cleaners.filter((c: any) => c.isActive)
  const inactiveCleaners = cleaners.filter((c: any) => !c.isActive)

  const handleDeactivate = (cleanerId: string, cleanerName: string) => {
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É–±–æ—Ä—â–∏–∫–∞ ${cleanerName}?`)) {
      deactivateCleanerMutation.mutate(cleanerId)
    }
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <Heading level={1}>–£–±–æ—Ä—â–∏–∫–∏</Heading>
          <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–±–æ—Ä—â–∏–∫–∞–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
          </Text>
        </div>
        <Button 
          onClick={() => setIsCreateDialogOpen(true)} 
          className="bg-black hover:bg-gray-800 text-white border-gray-600"
        >
          + –î–æ–±–∞–≤–∏—Ç—å —É–±–æ—Ä—â–∏–∫–∞
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
          <Heading level={3} className="mb-2">–í—Å–µ–≥–æ —É–±–æ—Ä—â–∏–∫–æ–≤</Heading>
          <Text className="text-3xl font-bold text-blue-600">{cleaners.length}</Text>
        </div>

        <div className="p-6 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
          <Heading level={3} className="mb-2">–ê–∫—Ç–∏–≤–Ω—ã—Ö</Heading>
          <Text className="text-3xl font-bold text-green-600">{activeCleaners.length}</Text>
          <Text className="text-sm text-zinc-500">
            {cleaners.length > 0 ? `${Math.round((activeCleaners.length / cleaners.length) * 100)}%` : '0%'}
          </Text>
        </div>

        <div className="p-6 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
          <Heading level={3} className="mb-2">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</Heading>
          <Text className="text-3xl font-bold text-red-600">{inactiveCleaners.length}</Text>
          <Text className="text-sm text-zinc-500">
            {cleaners.length > 0 ? `${Math.round((inactiveCleaners.length / cleaners.length) * 100)}%` : '0%'}
          </Text>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
      {cleaners.length === 0 && (
        <div className="bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg">
          <Heading level={3} className="text-blue-900 dark:text-blue-100 mb-2">
            üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
          </Heading>
          <Text className="text-blue-800 dark:text-blue-200 mb-4">
            –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–±–æ—Ä—â–∏–∫–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–±–æ—Ä–∫–∏, –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —É–±–æ—Ä—â–∏–∫–∞.
          </Text>
          <div className="space-y-2 text-sm text-blue-700 dark:text-blue-300">
            <p><strong>–®–∞–≥ 1:</strong> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ IAM)</p>
            <p><strong>–®–∞–≥ 2:</strong> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É &ldquo;–î–æ–±–∞–≤–∏—Ç—å —É–±–æ—Ä—â–∏–∫–∞&rdquo;</p>
            <p><strong>–®–∞–≥ 3:</strong> –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</p>
          </div>
        </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ —É–±–æ—Ä—â–∏–∫–æ–≤ */}
      {cleaners.length > 0 && (
        <div className="space-y-4">
          <Heading level={2}>–°–ø–∏—Å–æ–∫ —É–±–æ—Ä—â–∏–∫–æ–≤ ({cleaners.length})</Heading>
          
          <div className="overflow-x-auto">
            <Table className="min-w-full bg-white dark:bg-zinc-800">
              <TableHead>
                <TableRow className="bg-gray-50 dark:bg-zinc-900">
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–§–ò–û</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–ö–æ–Ω—Ç–∞–∫—Ç—ã</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–†–µ–π—Ç–∏–Ω–≥</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</TableHeader>
                </TableRow>
              </TableHead>
              <TableBody>
                {cleaners.map((cleaner: any) => (
                  <TableRow 
                    key={cleaner.id} 
                    className="hover:bg-gray-50 dark:hover:bg-zinc-700 transition-colors duration-150 cursor-pointer"
                    onClick={() => handleCleanerClick(cleaner.id)}
                  >
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {cleaner.isActive ? (
                        <Badge color="green">–ê–∫—Ç–∏–≤–µ–Ω</Badge>
                      ) : (
                        <Badge color="red">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</Badge>
                      )}
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <Text className="font-medium text-gray-900 dark:text-white">
                          {cleaner.firstName} {cleaner.lastName}
                        </Text>
                        <Text className="text-xs text-gray-500 dark:text-gray-400">
                          ID: {cleaner.id.substring(0, 8)}...
                        </Text>
                      </div>
                    </TableCell>
                    <TableCell className="px-6 py-4">
                      <div className="space-y-1">
                        {cleaner.phone && (
                          <Text className="text-sm text-gray-900 dark:text-white">
                            üìû {cleaner.phone}
                          </Text>
                        )}
                        {cleaner.email && (
                          <Text className="text-sm text-gray-900 dark:text-white">
                            ‚úâÔ∏è {cleaner.email}
                          </Text>
                        )}
                        {!cleaner.phone && !cleaner.email && (
                          <Text className="text-sm text-gray-500 dark:text-gray-400">
                            –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                          </Text>
                        )}
                      </div>
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {cleaner.rating ? (
                        <div>
                          <Text className="text-lg font-bold text-yellow-600">
                            ‚≠ê {cleaner.rating.toFixed(1)}
                          </Text>
                        </div>
                      ) : (
                        <Text className="text-gray-500 dark:text-gray-400">
                          –ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
                        </Text>
                      )}
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      <Text className="text-sm text-gray-900 dark:text-white">
                        {new Date(cleaner.createdAt).toLocaleDateString()}
                      </Text>
                      <Text className="text-xs text-gray-500 dark:text-gray-400">
                        {new Date(cleaner.createdAt).toLocaleTimeString()}
                      </Text>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —É–±–æ—Ä—â–∏–∫–∞ */}
      <CreateCleanerDialog
        isOpen={isCreateDialogOpen}
        onClose={() => setIsCreateDialogOpen(false)}
        orgId={orgId}
      />
    </div>
  )
}

