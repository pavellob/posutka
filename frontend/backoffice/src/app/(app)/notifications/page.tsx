'use client'

import { useState } from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { Heading } from '@/components/heading'
import { Text } from '@/components/text'
import { Badge } from '@/components/badge'
import { Button } from '@/components/button'
import { Table, TableHead, TableBody, TableRow, TableHeader, TableCell } from '@/components/table'
import { Select } from '@/components/select'
import { graphqlClient } from '@/lib/graphql-client'
import { useCurrentUser } from '@/hooks/useCurrentUser'
import { GET_NOTIFICATIONS, MARK_AS_READ, MARK_ALL_AS_READ } from '@/lib/graphql-queries'

export default function NotificationsPage() {
  const [filter, setFilter] = useState<'all' | 'unread'>('all')
  const [eventTypeFilter, setEventTypeFilter] = useState('')
  
  const queryClient = useQueryClient()
  const { currentUserId } = useCurrentUser()
  
  // –ó–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const { data: notificationsData, isLoading } = useQuery<any>({
    queryKey: ['notifications', currentUserId, filter, eventTypeFilter],
    queryFn: () => graphqlClient.request(GET_NOTIFICATIONS, {
      userId: currentUserId!,
      unreadOnly: filter === 'unread',
      eventType: eventTypeFilter || undefined,
      first: 100,
    }),
    enabled: !!currentUserId,
  })
  
  // –ú—É—Ç–∞—Ü–∏–∏
  const markAsReadMutation = useMutation({
    mutationFn: (id: string) => graphqlClient.request(MARK_AS_READ, { id }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] })
    },
  })
  
  const markAllAsReadMutation = useMutation({
    mutationFn: () => graphqlClient.request(MARK_ALL_AS_READ, { userId: currentUserId! }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] })
    },
  })
  
  const notifications = notificationsData?.notifications?.edges?.map((edge: any) => edge.node) || []
  const unreadCount = notifications.filter((n: any) => !n.readAt).length
  
  const getEventIcon = (eventType: string) => {
    const iconMap: Record<string, string> = {
      'CLEANING_ASSIGNED': 'üßπ',
      'CLEANING_COMPLETED': '‚úÖ',
      'CLEANING_CANCELLED': '‚ùå',
      'CLEANING_STARTED': '‚ñ∂Ô∏è',
      'TASK_ASSIGNED': 'üìã',
      'TASK_COMPLETED': '‚úì',
      'BOOKING_CREATED': 'üè†',
      'PAYMENT_RECEIVED': 'üí∞',
      'SYSTEM_ALERT': 'üîî',
    }
    return iconMap[eventType] || 'üì¨'
  }
  
  const getEventLabel = (eventType: string) => {
    const labelMap: Record<string, string> = {
      'CLEANING_ASSIGNED': '–£–±–æ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
      'CLEANING_COMPLETED': '–£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      'CLEANING_CANCELLED': '–£–±–æ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
      'CLEANING_STARTED': '–£–±–æ—Ä–∫–∞ –Ω–∞—á–∞—Ç–∞',
      'TASK_ASSIGNED': '–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
      'TASK_COMPLETED': '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      'BOOKING_CREATED': '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
      'PAYMENT_RECEIVED': '–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
      'SYSTEM_ALERT': '–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ',
    }
    return labelMap[eventType] || eventType
  }
  
  const getPriorityBadge = (priority: string) => {
    const priorityMap = {
      'URGENT': { color: 'red' as const, text: '–°—Ä–æ—á–Ω–æ' },
      'HIGH': { color: 'orange' as const, text: '–í–∞–∂–Ω–æ' },
      'NORMAL': { color: 'blue' as const, text: '–û–±—ã—á–Ω–æ–µ' },
      'LOW': { color: 'zinc' as const, text: '–ù–∏–∑–∫–∏–π' },
    }
    const info = priorityMap[priority as keyof typeof priorityMap] || { color: 'zinc' as const, text: priority }
    return <Badge color={info.color}>{info.text}</Badge>
  }
  
  if (!currentUserId) {
    return (
      <div className="space-y-6">
        <Heading level={1}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Heading>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</Text>
      </div>
    )
  }
  
  if (isLoading) {
    return (
      <div className="space-y-6">
        <Heading level={1}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Heading>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </div>
    )
  }
  
  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <Heading level={1}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Heading>
          <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
            –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
          </Text>
        </div>
        {unreadCount > 0 && (
          <Button 
            onClick={() => markAllAsReadMutation.mutate()}
            className="bg-blue-600 hover:bg-blue-700 text-white"
          >
            –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ ({unreadCount})
          </Button>
        )}
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="p-6 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
          <Heading level={3} className="mb-2">–í—Å–µ–≥–æ</Heading>
          <Text className="text-3xl font-bold text-blue-600">{notifications.length}</Text>
        </div>
        
        <div className="p-6 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
          <Heading level={3} className="mb-2">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</Heading>
          <Text className="text-3xl font-bold text-orange-600">{unreadCount}</Text>
        </div>
        
        <div className="p-6 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
          <Heading level={3} className="mb-2">–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</Heading>
          <Text className="text-3xl font-bold text-green-600">{notifications.length - unreadCount}</Text>
        </div>
      </div>
      
      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="space-y-4">
        <Heading level={2}>–§–∏–ª—å—Ç—Ä—ã</Heading>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">–°—Ç–∞—Ç—É—Å</label>
            <Select value={filter} onChange={(e) => setFilter(e.target.value as any)}>
              <option value="all">–í—Å–µ</option>
              <option value="unread">–¢–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</option>
            </Select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
            <Select value={eventTypeFilter} onChange={(e) => setEventTypeFilter(e.target.value)}>
              <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="CLEANING_ASSIGNED">–£–±–æ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</option>
              <option value="CLEANING_COMPLETED">–£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</option>
              <option value="TASK_ASSIGNED">–ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞</option>
              <option value="BOOKING_CREATED">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ</option>
              <option value="PAYMENT_RECEIVED">–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω</option>
            </Select>
          </div>
          
          <div className="flex items-end">
            <Button 
              onClick={() => {
                setFilter('all')
                setEventTypeFilter('')
              }}
              className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 border-gray-300 dark:bg-zinc-700 dark:hover:bg-zinc-600 dark:text-gray-300"
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
          </div>
        </div>
      </div>
      
      {/* –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <div className="space-y-4">
        <Heading level={2}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({notifications.length})</Heading>
        
        {notifications.length === 0 ? (
          <div className="text-center py-12 bg-white dark:bg-zinc-800 rounded-lg border border-gray-200 dark:border-zinc-700">
            <div className="text-6xl mb-4">üì≠</div>
            <Text className="text-gray-500 dark:text-gray-400">
              {filter === 'unread' ? '–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}
            </Text>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <Table className="min-w-full bg-white dark:bg-zinc-800">
              <TableHead>
                <TableRow className="bg-gray-50 dark:bg-zinc-900">
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–°–æ–±—ã—Ç–∏–µ</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–°–æ–æ–±—â–µ–Ω–∏–µ</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–î–∞—Ç–∞</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–î–µ–π—Å—Ç–≤–∏—è</TableHeader>
                </TableRow>
              </TableHead>
              <TableBody>
                {notifications.map((notification: any) => (
                  <TableRow 
                    key={notification.id} 
                    className={`hover:bg-gray-50 dark:hover:bg-zinc-700 transition-colors ${
                      !notification.readAt ? 'bg-blue-50 dark:bg-blue-900/20' : ''
                    }`}
                  >
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {notification.readAt ? (
                        <Badge color="green">–ü—Ä–æ—á–∏—Ç–∞–Ω–æ</Badge>
                      ) : (
                        <Badge color="orange">–ù–æ–≤–æ–µ</Badge>
                      )}
                    </TableCell>
                    
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center gap-2">
                        <span className="text-2xl">{getEventIcon(notification.eventType)}</span>
                        <Text className="text-sm">{getEventLabel(notification.eventType)}</Text>
                      </div>
                    </TableCell>
                    
                    <TableCell className="px-6 py-4">
                      <div className="max-w-md">
                        <Text className="font-medium text-gray-900 dark:text-white">
                          {notification.title}
                        </Text>
                        <Text className="text-sm text-gray-500 dark:text-gray-400 line-clamp-2">
                          {notification.message}
                        </Text>
                      </div>
                    </TableCell>
                    
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {getPriorityBadge(notification.priority)}
                    </TableCell>
                    
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      <Text className="text-sm text-gray-900 dark:text-white">
                        {new Date(notification.createdAt).toLocaleString('ru')}
                      </Text>
                    </TableCell>
                    
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      <div className="flex gap-2">
                        {!notification.readAt && (
                          <Button
                            onClick={() => markAsReadMutation.mutate(notification.id)}
                            className="text-xs bg-blue-600 hover:bg-blue-700 text-white"
                          >
                            –ü—Ä–æ—á–∏—Ç–∞—Ç—å
                          </Button>
                        )}
                        {notification.actionUrl && (
                          <Button
                            onClick={() => window.location.href = notification.actionUrl}
                            className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 border-gray-300 dark:bg-zinc-700 dark:hover:bg-zinc-600 dark:text-gray-300"
                          >
                            {notification.actionText || '–û—Ç–∫—Ä—ã—Ç—å ‚Üí'}
                          </Button>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        )}
      </div>
    </div>
  )
}
