'use client'

import { useState } from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { useRouter } from 'next/navigation'
import { Heading } from '@/components/heading'
import { Text } from '@/components/text'
import { Badge } from '@/components/badge'
import { Button } from '@/components/button'
import { Table, TableHead, TableBody, TableRow, TableHeader, TableCell } from '@/components/table'
import { Select } from '@/components/select'
import { Input } from '@/components/input'
import { Dialog } from '@/components/dialog'
import { Dropdown, DropdownButton, DropdownMenu, DropdownItem } from '@/components/dropdown'
import { Squares2X2Icon, TableCellsIcon, EllipsisVerticalIcon, ViewColumnsIcon } from '@heroicons/react/24/outline'
import { GET_TASKS, GET_SERVICE_PROVIDERS, GET_CLEANERS, ASSIGN_TASK, UPDATE_TASK_STATUS, SCHEDULE_CLEANING } from '@/lib/graphql-queries'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
function TaskCard({ task, onAssign, onUpdateStatus, onEdit }: { 
  task: Task; 
  onAssign: (task: Task) => void;
  onUpdateStatus: (taskId: string, status: string) => void;
  onEdit: (task: Task) => void;
}) {
  const router = useRouter()
  const getStatusBadge = (status: string) => {
    const statusMap = {
      'TODO': { color: 'orange' as const, text: '–û–∂–∏–¥–∞–µ—Ç' },
      'IN_PROGRESS': { color: 'blue' as const, text: '–í —Ä–∞–±–æ—Ç–µ' },
      'DONE': { color: 'green' as const, text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' },
      'CANCELED': { color: 'red' as const, text: '–û—Ç–º–µ–Ω–µ–Ω–∞' }
    }
    const statusInfo = statusMap[status as keyof typeof statusMap] || { color: 'zinc' as const, text: status }
    return <Badge color={statusInfo.color}>{statusInfo.text}</Badge>
  }

  const getTypeBadge = (type: string) => {
    const typeMap = {
      'CLEANING': { color: 'blue' as const, text: '–£–±–æ—Ä–∫–∞' },
      'CHECKIN': { color: 'green' as const, text: '–ó–∞—Å–µ–ª–µ–Ω–∏–µ' },
      'CHECKOUT': { color: 'purple' as const, text: '–í—ã—Å–µ–ª–µ–Ω–∏–µ' },
      'MAINTENANCE': { color: 'orange' as const, text: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' },
      'INVENTORY': { color: 'cyan' as const, text: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è' }
    }
    const typeInfo = typeMap[type as keyof typeof typeMap] || { color: 'zinc' as const, text: type }
    return <Badge color={typeInfo.color}>{typeInfo.text}</Badge>
  }

  return (
    <div 
      className="p-6 space-y-4 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg hover:shadow-lg transition-shadow cursor-pointer"
      onClick={() => router.push(`/tasks/${task.id}`)}
    >
      <div className="flex items-center space-x-2">
        {getTypeBadge(task.type)}
        {getStatusBadge(task.status)}
      </div>
      
      {task.note && (
        <Text className="text-sm text-gray-700 dark:text-gray-300">
          {task.note}
        </Text>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="space-y-3">
        {/* –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
        {task.dueAt && (
          <div>
            <Text className="text-sm font-medium text-gray-900 dark:text-white">
              –°—Ä–æ–∫: {new Date(task.dueAt).toLocaleDateString()}
            </Text>
          </div>
        )}

        {/* –û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ */}
        {task.unit?.property && (
          <div>
            <Text className="text-sm font-medium text-gray-900 dark:text-white">
              {task.unit.property.title}
            </Text>
            <Text className="text-xs text-gray-500 dark:text-gray-400">
              {task.unit.name}
            </Text>
          </div>
        )}

        {/* –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
        {task.booking && (
          <div>
            <Text className="text-sm font-medium text-gray-900 dark:text-white">
              {task.booking.guest.name}
            </Text>
            <Text className="text-xs text-gray-500 dark:text-gray-400">
              {new Date(task.booking.checkIn).toLocaleDateString()} - {new Date(task.booking.checkOut).toLocaleDateString()}
            </Text>
          </div>
        )}

        {/* –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å */}
        <div>
          {task.assignedTo ? (
            <>
              <Text className="text-sm font-medium text-gray-900 dark:text-white">
                {task.assignedTo.name}
              </Text>
              <Text className="text-xs text-gray-500 dark:text-gray-400">
                {task.assignedTo.contact}
              </Text>
              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å —É–±–æ—Ä–∫–æ–π –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ CLEANING */}
              {task.type === 'CLEANING' && (
                <Text className="text-xs text-blue-600 dark:text-blue-400 mt-1">
                  üîó –ü—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É–±–æ—Ä–∫–∞
                </Text>
              )}
            </>
          ) : (
            <Text className="text-sm text-gray-500 dark:text-gray-400">
              –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
            </Text>
          )}
        </div>
      </div>
    </div>
  )
}
import { CreateTaskDialog } from '@/components/create-task-dialog'
import { EditTaskDialog } from '@/components/edit-task-dialog'
import { KanbanBoard } from '@/components/kanban-board'
import { graphqlClient } from '@/lib/graphql-client'
import { useCurrentOrganization } from '@/hooks/useCurrentOrganization'
import type { 
  GetTasksQuery, 
  GetServiceProvidersQuery,
  AssignTaskMutation,
  UpdateTaskStatusMutation
} from '@/lib/generated/graphql'

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
type Task = NonNullable<GetTasksQuery['tasks']['edges'][0]>['node']
type ServiceProvider = NonNullable<GetServiceProvidersQuery['serviceProviders'][0]>

export default function TasksPage() {
  const router = useRouter()
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞ (—Ç–∞–±–ª–∏—Ü–∞/–∫–∞—Ä—Ç–æ—á–∫–∏/–∫–∞–Ω–±–∞–Ω)
  const [viewMode, setViewMode] = useState<'table' | 'cards' | 'kanban'>('table')
  
  const [selectedTask, setSelectedTask] = useState<Task | null>(null)
  const [showAssignDialog, setShowAssignDialog] = useState(false)
  const [showCreateDialog, setShowCreateDialog] = useState(false)
  const [showEditDialog, setShowEditDialog] = useState(false)
  const [filters, setFilters] = useState({
    status: '',
    type: '',
    search: ''
  })
  
  const queryClient = useQueryClient()

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { currentOrgId, isLoading: orgLoading } = useCurrentOrganization()
  const orgId = currentOrgId

  // –ó–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á
  const { data: tasksData, isLoading: tasksLoading, refetch } = useQuery<GetTasksQuery>({
    queryKey: ['tasks', orgId, filters.status, filters.type],
    queryFn: () => graphqlClient.request(GET_TASKS, {
      orgId: orgId!,
      status: filters.status || undefined,
      type: filters.type || undefined,
      first: 20
    }),
    enabled: !!orgId
  })

  // –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —É—Å–ª—É–≥
  const { data: providersData } = useQuery<GetServiceProvidersQuery>({
    queryKey: ['serviceProviders', filters.type],
    queryFn: () => graphqlClient.request(GET_SERVICE_PROVIDERS, {
      serviceTypes: filters.type ? [filters.type] : undefined
    })
  })

  // –ó–∞–ø—Ä–æ—Å —É–±–æ—Ä—â–∏–∫–æ–≤ (–¥–ª—è –∑–∞–¥–∞—á CLEANING)
  const { data: cleanersData } = useQuery<any>({
    queryKey: ['cleaners', orgId],
    queryFn: () => graphqlClient.request(GET_CLEANERS, {
      orgId: orgId!,
      isActive: true,
      first: 100
    }),
    enabled: !!orgId
  })

  // –ú—É—Ç–∞—Ü–∏–∏
  const assignTaskMutation = useMutation<AssignTaskMutation, Error, any>({
    mutationFn: (input: any) => graphqlClient.request(ASSIGN_TASK, { input }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['tasks'] })
      setShowAssignDialog(false)
    }
  })

  const scheduleCleaningMutation = useMutation({
    mutationFn: (input: any) => graphqlClient.request(SCHEDULE_CLEANING, { input }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['cleanings'] })
      queryClient.invalidateQueries({ queryKey: ['tasks'] })
    }
  })

  const updateTaskStatusMutation = useMutation<UpdateTaskStatusMutation, Error, { id: string; status: string }>({
    mutationFn: ({ id, status }: { id: string; status: string }) => 
      graphqlClient.request(UPDATE_TASK_STATUS, { id, status }),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['tasks'] })
    }
  })

  const handleAssignTask = async (taskId: string, assigneeId: string, taskType: string) => {
    // –î–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ CLEANING –Ω–∞–∑–Ω–∞—á–∞–µ–º —É–±–æ—Ä—â–∏–∫–∞ –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å Cleaning
    if (taskType === 'CLEANING') {
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∞–µ–º —É–±–æ—Ä—â–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É
      await assignTaskMutation.mutateAsync({
        taskId,
        cleanerId: assigneeId
      })
      
      // –ó–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å Cleaning
      const task = tasks.find(t => t.id === taskId)
      if (task) {
        try {
          const cleaningResult = await scheduleCleaningMutation.mutateAsync({
            orgId: orgId!,
            cleanerId: assigneeId,
            unitId: task.unit?.id,
            bookingId: task.booking?.id,
            taskId: taskId,
            scheduledAt: task.dueAt || new Date().toISOString(),
            notes: task.note || '–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —É–±–æ—Ä—â–∏–∫–∞',
            requiresLinenChange: false,
            checklistItems: [
              { label: '–ü—Ä–æ–ø—ã–ª–µ—Å–æ—Å–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã', isChecked: false, order: 0 },
              { label: '–ü–æ–º—ã—Ç—å –ø–æ–ª—ã', isChecked: false, order: 1 },
              { label: '–ü—Ä–æ—Ç–µ—Ä–µ—Ç—å –ø—ã–ª—å', isChecked: false, order: 2 },
              { label: '–£–±—Ä–∞—Ç—å –≤ –≤–∞–Ω–Ω–æ–π', isChecked: false, order: 3 },
              { label: '–£–±—Ä–∞—Ç—å –Ω–∞ –∫—É—Ö–Ω–µ', isChecked: false, order: 4 },
              { label: '–°–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ –±–µ–ª—å–µ', isChecked: false, order: 5 },
              { label: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–∏–±–æ—Ä—ã', isChecked: false, order: 6 },
              { label: '–í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä', isChecked: false, order: 7 }
            ]
          })
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–±–æ—Ä–∫–∞–º
          const cleanerName = cleanersData?.cleaners?.edges?.find((edge: any) => edge.node.id === assigneeId)?.node
          const cleanerFullName = cleanerName ? `${cleanerName.firstName} ${cleanerName.lastName}` : '—É–±–æ—Ä—â–∏–∫'
          
          if (confirm(`‚úÖ –£—Å–ø–µ—à–Ω–æ!\n\n‚Ä¢ –£–±–æ—Ä—â–∏–∫ ${cleanerFullName} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É\n‚Ä¢ –£–±–æ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"\n\n–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–±–æ—Ä–æ–∫?`)) {
            window.location.href = '/cleanings'
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–±–æ—Ä–∫–∏:', error)
          alert('‚ö†Ô∏è –£–±–æ—Ä—â–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å —É–±–æ—Ä–∫–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —É–±–æ—Ä–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—É /cleanings –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–±–æ—Ä–∫—É".')
        }
      }
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      assignTaskMutation.mutate({
        taskId,
        providerId: assigneeId
      })
    }
  }

  const handleUpdateStatus = async (taskId: string, status: string) => {
    updateTaskStatusMutation.mutate({ id: taskId, status })
  }

  const handleEditTask = (task: Task) => {
    setSelectedTask(task)
    setShowEditDialog(true)
  }

  const getStatusBadge = (status: string) => {
    const statusMap = {
      'TODO': { color: 'orange' as const, text: '–û–∂–∏–¥–∞–µ—Ç' },
      'IN_PROGRESS': { color: 'blue' as const, text: '–í —Ä–∞–±–æ—Ç–µ' },
      'DONE': { color: 'green' as const, text: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' },
      'CANCELED': { color: 'red' as const, text: '–û—Ç–º–µ–Ω–µ–Ω–∞' }
    }
    const statusInfo = statusMap[status as keyof typeof statusMap] || { color: 'zinc' as const, text: status }
    return <Badge color={statusInfo.color}>{statusInfo.text}</Badge>
  }

  const getTypeBadge = (type: string) => {
    const typeMap = {
      'CLEANING': { color: 'blue' as const, text: '–£–±–æ—Ä–∫–∞' },
      'CHECKIN': { color: 'green' as const, text: '–ó–∞—Å–µ–ª–µ–Ω–∏–µ' },
      'CHECKOUT': { color: 'purple' as const, text: '–í—ã—Å–µ–ª–µ–Ω–∏–µ' },
      'MAINTENANCE': { color: 'orange' as const, text: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' },
      'INVENTORY': { color: 'cyan' as const, text: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è' }
    }
    const typeInfo = typeMap[type as keyof typeof typeMap] || { color: 'zinc' as const, text: type }
    return <Badge color={typeInfo.color}>{typeInfo.text}</Badge>
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
  if (orgLoading || !orgId) {
    return (
      <div className="space-y-6">
        <div>
          <Heading level={1}>–ó–∞–¥–∞—á–∏</Heading>
          <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
            –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...
          </Text>
        </div>
      </div>
    )
  }

  if (tasksLoading) {
    return (
      <div className="space-y-6">
        <Heading level={1}>–ó–∞–¥–∞—á–∏</Heading>
        <Text>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </div>
    )
  }

  const tasks = tasksData?.tasks?.edges?.map(edge => edge.node) || []

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const totalTasks = tasks.length
  const backlogTasks = tasks.filter(t => t.status === 'TODO' && !t.assignedTo).length
  const todoTasks = tasks.filter(t => t.status === 'TODO' && t.assignedTo).length
  const inProgressTasks = tasks.filter(t => t.status === 'IN_PROGRESS').length
  const doneTasks = tasks.filter(t => t.status === 'DONE').length
  const canceledTasks = tasks.filter(t => t.status === 'CANCELED').length

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <Heading level={1}>–ó–∞–¥–∞—á–∏</Heading>
          <Text className="mt-2 text-zinc-600 dark:text-zinc-400">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
          </Text>
        </div>
        <Button onClick={() => setShowCreateDialog(true)} className="bg-black hover:bg-gray-800 text-white border-gray-600">
          –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
        </Button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6">
        <div className="p-6">
          <Heading level={3} className="mb-4">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</Heading>
          <Text className="text-2xl font-bold text-blue-600">{totalTasks}</Text>
          <Text className="text-sm text-zinc-500">–ó–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ</Text>
        </div>

        <div className="p-6">
          <Heading level={3} className="mb-4">Backlog</Heading>
          <Text className="text-2xl font-bold text-gray-600">{backlogTasks}</Text>
          <Text className="text-sm text-zinc-500">
            {totalTasks > 0 ? `${Math.round((backlogTasks / totalTasks) * 100)}%` : '0%'}
          </Text>
        </div>

        <div className="p-6">
          <Heading level={3} className="mb-4">–û–∂–∏–¥–∞—é—Ç</Heading>
          <Text className="text-2xl font-bold text-orange-600">{todoTasks}</Text>
          <Text className="text-sm text-zinc-500">
            {totalTasks > 0 ? `${Math.round((todoTasks / totalTasks) * 100)}%` : '0%'}
          </Text>
        </div>

        <div className="p-6">
          <Heading level={3} className="mb-4">–í —Ä–∞–±–æ—Ç–µ</Heading>
          <Text className="text-2xl font-bold text-blue-600">{inProgressTasks}</Text>
          <Text className="text-sm text-zinc-500">
            {totalTasks > 0 ? `${Math.round((inProgressTasks / totalTasks) * 100)}%` : '0%'}
          </Text>
        </div>

        <div className="p-6">
          <Heading level={3} className="mb-4">–ó–∞–≤–µ—Ä—à–µ–Ω—ã</Heading>
          <Text className="text-2xl font-bold text-green-600">{doneTasks}</Text>
          <Text className="text-sm text-zinc-500">
            {totalTasks > 0 ? `${Math.round((doneTasks / totalTasks) * 100)}%` : '0%'}
          </Text>
        </div>

        <div className="p-6">
          <Heading level={3} className="mb-4">–û—Ç–º–µ–Ω–µ–Ω—ã</Heading>
          <Text className="text-2xl font-bold text-red-600">{canceledTasks}</Text>
          <Text className="text-sm text-zinc-500">
            {totalTasks > 0 ? `${Math.round((canceledTasks / totalTasks) * 100)}%` : '0%'}
          </Text>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="space-y-4">
        <Heading level={2}>–§–∏–ª—å—Ç—Ä—ã</Heading>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">–°—Ç–∞—Ç—É—Å</label>
            <Select
              value={filters.status}
              onChange={(e) => setFilters({ ...filters, status: e.target.value })}
            >
              <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="TODO">–û–∂–∏–¥–∞–µ—Ç</option>
              <option value="IN_PROGRESS">–í —Ä–∞–±–æ—Ç–µ</option>
              <option value="DONE">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
              <option value="CANCELED">–û—Ç–º–µ–Ω–µ–Ω–∞</option>
            </Select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">–¢–∏–ø</label>
            <Select
              value={filters.type}
              onChange={(e) => setFilters({ ...filters, type: e.target.value })}
            >
              <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="CLEANING">–£–±–æ—Ä–∫–∞</option>
              <option value="CHECKIN">–ó–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—è</option>
              <option value="CHECKOUT">–í—ã—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—è</option>
              <option value="MAINTENANCE">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</option>
              <option value="INVENTORY">–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</option>
            </Select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-2">–ü–æ–∏—Å–∫</label>
            <Input
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º..."
              value={filters.search}
              onChange={(e) => setFilters({ ...filters, search: e.target.value })}
            />
          </div>
          <div className="flex items-end gap-2">
            <Button 
              onClick={() => refetch()} 
              className="flex-1 bg-black hover:bg-gray-800 text-white border-gray-600"
            >
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </Button>
            <Button 
              onClick={() => setFilters({ status: '', type: '', search: '' })}
              className="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 border-gray-300 dark:bg-zinc-700 dark:hover:bg-zinc-600 dark:text-gray-300 dark:border-zinc-600"
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </div>
        </div>
        
        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        {(filters.status || filters.type || filters.search) && (
          <div className="mt-4 pt-4 border-t border-zinc-200 dark:border-zinc-700">
            <div className="flex flex-wrap gap-2">
              <Text className="text-sm text-zinc-600 dark:text-zinc-400">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</Text>
              {filters.status && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 rounded-full text-xs">
                  –°—Ç–∞—Ç—É—Å: {filters.status === 'TODO' ? '–û–∂–∏–¥–∞–µ—Ç' : filters.status === 'IN_PROGRESS' ? '–í —Ä–∞–±–æ—Ç–µ' : filters.status === 'DONE' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' : filters.status === 'CANCELED' ? '–û—Ç–º–µ–Ω–µ–Ω–∞' : filters.status}
                  <button onClick={() => setFilters({ ...filters, status: '' })} className="ml-1 hover:text-blue-600">√ó</button>
                </span>
              )}
              {filters.type && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 rounded-full text-xs">
                  –¢–∏–ø: {filters.type === 'CLEANING' ? '–£–±–æ—Ä–∫–∞' : filters.type === 'CHECKIN' ? '–ó–∞—Å–µ–ª–µ–Ω–∏–µ' : filters.type === 'CHECKOUT' ? '–í—ã—Å–µ–ª–µ–Ω–∏–µ' : filters.type === 'MAINTENANCE' ? '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' : filters.type === 'INVENTORY' ? '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è' : filters.type}
                  <button onClick={() => setFilters({ ...filters, type: '' })} className="ml-1 hover:text-green-600">√ó</button>
                </span>
              )}
              {filters.search && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-orange-100 dark:bg-orange-900/30 text-orange-800 dark:text-orange-200 rounded-full text-xs">
                  –ü–æ–∏—Å–∫: &ldquo;{filters.search}&rdquo;
                  <button onClick={() => setFilters({ ...filters, search: '' })} className="ml-1 hover:text-orange-600">√ó</button>
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Heading level={2}>–ó–∞–¥–∞—á–∏</Heading>
          <div className="flex items-center space-x-4">
            <Text className="text-sm text-gray-500 dark:text-gray-400">
              –ü–æ–∫–∞–∑–∞–Ω–æ: {tasks.length}
            </Text>
              <div className="flex items-center space-x-1 bg-gray-100 dark:bg-zinc-700 rounded-lg p-1">
                <Button
                  onClick={() => setViewMode('table')}
                  className={`p-2 bg-transparent hover:bg-gray-200 dark:hover:bg-zinc-600 border-gray-300 dark:border-zinc-600 text-gray-700 dark:text-gray-300 ${viewMode === 'table' ? 'bg-white dark:bg-zinc-600 shadow-sm' : ''}`}
                  title="–¢–∞–±–ª–∏—Ü–∞"
                >
                  <TableCellsIcon className="w-4 h-4" />
                </Button>
                <Button
                  onClick={() => setViewMode('cards')}
                  className={`p-2 bg-transparent hover:bg-gray-200 dark:hover:bg-zinc-600 border-gray-300 dark:border-zinc-600 text-gray-700 dark:text-gray-300 ${viewMode === 'cards' ? 'bg-white dark:bg-zinc-600 shadow-sm' : ''}`}
                  title="–ö–∞—Ä—Ç–æ—á–∫–∏"
                >
                  <Squares2X2Icon className="w-4 h-4" />
                </Button>
                <Button
                  onClick={() => setViewMode('kanban')}
                  className={`p-2 bg-transparent hover:bg-gray-200 dark:hover:bg-zinc-600 border-gray-300 dark:border-zinc-600 text-gray-700 dark:text-gray-300 ${viewMode === 'kanban' ? 'bg-white dark:bg-zinc-600 shadow-sm' : ''}`}
                  title="–ö–∞–Ω–±–∞–Ω"
                >
                  <ViewColumnsIcon className="w-4 h-4" />
                </Button>
              </div>
          </div>
        </div>
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ */}
        {viewMode === 'kanban' ? (
          <KanbanBoard
            tasks={tasks as any}
            onUpdateStatus={handleUpdateStatus}
            onEdit={handleEditTask as any}
            onAssign={(task) => {
              setSelectedTask(task as any)
              setShowAssignDialog(true)
            }}
            onAssignTask={(taskId: string, assigneeId: string, taskType: string) => 
              handleAssignTask(taskId, assigneeId, taskType)
            }
            onDragToAssign={(task) => {
              setSelectedTask(task as any)
              setShowAssignDialog(true)
            }}
          />
        ) : viewMode === 'table' ? (
          <div className="overflow-x-auto">
            <Table className="min-w-full">
              <TableHead>
                <TableRow className="bg-gray-50 dark:bg-zinc-900">
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–¢–∏–ø</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–°—Ä–æ–∫</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–û–±—ä–µ–∫—Ç</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</TableHeader>
                  <TableHeader className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</TableHeader>
                </TableRow>
              </TableHead>
              <TableBody>
                {tasks.map((task) => (
                  <TableRow 
                    key={task.id} 
                    className="hover:bg-gray-50 dark:hover:bg-zinc-700 transition-colors duration-150 cursor-pointer"
                    onClick={() => router.push(`/tasks/${task.id}`)}
                  >
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {getTypeBadge(task.type)}
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(task.status)}
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      <Text className="text-sm text-gray-900 dark:text-white">
                        {task.dueAt ? new Date(task.dueAt).toLocaleDateString() : '-'}
                      </Text>
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {task.unit?.property?.title && (
                        <div>
                          <Text className="font-medium text-gray-900 dark:text-white">{task.unit.property.title}</Text>
                          <Text className="text-sm text-gray-500 dark:text-gray-400">{task.unit.name}</Text>
                        </div>
                      )}
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {task.booking && (
                        <div>
                          <Text className="font-medium text-gray-900 dark:text-white">{task.booking.guest.name}</Text>
                          <Text className="text-sm text-gray-500 dark:text-gray-400">
                            {new Date(task.booking.checkIn).toLocaleDateString()} - {new Date(task.booking.checkOut).toLocaleDateString()}
                          </Text>
                        </div>
                      )}
                    </TableCell>
                    <TableCell className="px-6 py-4 whitespace-nowrap">
                      {task.type === 'CLEANING' && task.assignedCleaner ? (
                        <div>
                          <Text className="font-medium text-gray-900 dark:text-white">
                            üßπ {task.assignedCleaner.firstName} {task.assignedCleaner.lastName}
                          </Text>
                          {task.assignedCleaner.rating && (
                            <Text className="text-sm text-yellow-600">
                              ‚≠ê {task.assignedCleaner.rating.toFixed(1)}
                            </Text>
                          )}
                          {task.assignedCleaner.phone && (
                            <Text className="text-xs text-gray-500 dark:text-gray-400">
                              {task.assignedCleaner.phone}
                            </Text>
                          )}
                          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å —É–±–æ—Ä–∫–æ–π */}
                          <div className="mt-1">
                            <Text className="text-xs text-blue-600 dark:text-blue-400">
                              üîó –ü—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É–±–æ—Ä–∫–∞
                            </Text>
                          </div>
                        </div>
                      ) : task.assignedTo ? (
                        <div>
                          <Text className="font-medium text-gray-900 dark:text-white">{task.assignedTo.name}</Text>
                          <Text className="text-sm text-gray-500 dark:text-gray-400">{task.assignedTo.contact}</Text>
                        </div>
                      ) : (
                        <Text className="text-gray-500 dark:text-gray-400">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</Text>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        ) : (
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {tasks.map((task) => (
                <TaskCard
                  key={task.id}
                  task={task}
                  onAssign={(task) => {
                    setSelectedTask(task)
                    setShowAssignDialog(true)
                  }}
                  onUpdateStatus={handleUpdateStatus}
                  onEdit={handleEditTask}
                />
              ))}
            </div>
            {tasks.length === 0 && (
              <div className="text-center py-12">
                <Text className="text-gray-500 dark:text-gray-400">
                  –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </Text>
              </div>
            )}
          </div>
        )}
      </div>

      {/* –î–∏–∞–ª–æ–≥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      <Dialog open={showAssignDialog} onClose={() => setShowAssignDialog(false)}>
        <div className="p-6">
          <Heading level={2} className="mb-4">–ù–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É</Heading>
          <Text className="mb-4">
            {selectedTask?.type === 'CLEANING' 
              ? '–í—ã–±–µ—Ä–∏—Ç–µ —É–±–æ—Ä—â–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–±–æ—Ä–∫–∏' 
              : '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –∑–∞–¥–∞—á–∏'}
          </Text>
          <div className="space-y-3">
            {selectedTask?.type === 'CLEANING' ? (
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–±–æ—Ä—â–∏–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á —Ç–∏–ø–∞ CLEANING
              cleanersData?.cleaners?.edges?.map((edge: any) => {
                const cleaner = edge.node
                return (
                  <div
                    key={cleaner.id}
                    className="p-3 border border-zinc-200 dark:border-zinc-700 rounded-lg cursor-pointer hover:bg-zinc-50 dark:hover:bg-zinc-700"
                    onClick={() => {
                      if (selectedTask) {
                        handleAssignTask(selectedTask.id, cleaner.id, selectedTask.type)
                        setShowAssignDialog(false)
                      }
                    }}
                  >
                    <div className="flex justify-between items-center">
                      <div>
                        <Text className="font-medium">
                          üßπ {cleaner.firstName} {cleaner.lastName}
                        </Text>
                        {cleaner.phone && (
                          <Text className="text-sm text-zinc-500">{cleaner.phone}</Text>
                        )}
                      </div>
                      {cleaner.rating && (
                        <Badge color="yellow">‚≠ê {cleaner.rating.toFixed(1)}</Badge>
                      )}
                    </div>
                  </div>
                )
              })
            ) : (
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —É—Å–ª—É–≥ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
              providersData?.serviceProviders?.map((provider) => (
                <div
                  key={provider.id}
                  className="p-3 border border-zinc-200 dark:border-zinc-700 rounded-lg cursor-pointer hover:bg-zinc-50 dark:hover:bg-zinc-700"
                  onClick={() => {
                    if (selectedTask) {
                      handleAssignTask(selectedTask.id, provider.id, selectedTask.type)
                      setShowAssignDialog(false)
                    }
                  }}
                >
                  <div className="flex justify-between items-center">
                    <div>
                      <Text className="font-medium">{provider.name}</Text>
                      <Text className="text-sm text-zinc-500">{provider.contact}</Text>
                    </div>
                    <Badge color="blue">–†–µ–π—Ç–∏–Ω–≥: {provider.rating}</Badge>
                  </div>
                </div>
              ))
            )}
            {selectedTask?.type === 'CLEANING' && (!cleanersData?.cleaners?.edges || cleanersData.cleaners.edges.length === 0) && (
              <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                <Text className="text-yellow-800 dark:text-yellow-200">
                  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–±–æ—Ä—â–∏–∫–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —É–±–æ—Ä—â–∏–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ <a href="/cleanings" className="underline">–£–±–æ—Ä–∫–∏</a>.
                </Text>
              </div>
            )}
            {selectedTask?.type !== 'CLEANING' && (!providersData?.serviceProviders || providersData.serviceProviders.length === 0) && (
              <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                <Text className="text-yellow-800 dark:text-yellow-200">
                  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏.
                </Text>
              </div>
            )}
          </div>
        </div>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      <CreateTaskDialog
        isOpen={showCreateDialog}
        onClose={() => setShowCreateDialog(false)}
        onSuccess={() => {
          queryClient.invalidateQueries({ queryKey: ['tasks'] })
        }}
        orgId={orgId!}
      />

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      <EditTaskDialog
        isOpen={showEditDialog}
        onClose={() => setShowEditDialog(false)}
        task={selectedTask}
        onSuccess={() => {
          queryClient.invalidateQueries({ queryKey: ['tasks'] })
          setShowEditDialog(false)
        }}
      />
    </div>
  )
}
