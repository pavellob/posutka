datasource db {
  provider = "postgresql"
  url      = "postgresql://_3c15a9b2c69d3f84:_79b90f83e54afae114e6de1be059d6@primary.posutka-db--nxf2xdqnnrcn.addon.code.run:5432/_8822989d4979?sslmode=require"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

model Organization {
  id         String     @id @default(cuid())
  name       String
  timezone   String
  currency   String
  properties Property[]
  memberships Membership[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Property {
  id        String   @id @default(cuid())
  orgId     String
  title     String
  address   String
  amenities String[]
  org       Organization @relation(fields: [orgId], references: [id])
  units     Unit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id         String   @id @default(cuid())
  propertyId String
  name       String
  capacity   Int
  beds       Int
  bathrooms  Int
  amenities  String[]
  property   Property @relation(fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CalendarBlock {
  id     String  @id @default(cuid())
  unitId String
  from   DateTime
  to     DateTime
  note   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guest {
  id             String   @id @default(cuid())
  name           String
  email          String
  phone          String?
  documentType   String?
  documentNumber String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bookings       Booking[]
}

model Booking {
  id                  String        @id @default(cuid())
  orgId               String
  unitId              String
  guestId             String
  status              BookingStatus @default(PENDING)
  source              BookingSource @default(DIRECT)
  checkIn             DateTime
  checkOut            DateTime
  guestsCount         Int
  basePriceAmount     Int
  basePriceCurrency   String
  cleaningFeeAmount   Int?
  cleaningFeeCurrency String?
  serviceFeeAmount    Int?
  serviceFeeCurrency  String?
  taxesAmount         Int?
  taxesCurrency       String?
  totalAmount         Int
  totalCurrency       String
  notes               String?
  cancellationReason  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  guest               Guest         @relation(fields: [guestId], references: [id])
  documents           Document[]
  depositTransactions DepositTransaction[]
}

model Document {
  id        String   @id @default(cuid())
  bookingId String
  type      String
  template  String
  content   String
  signedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id])
}

model DepositTransaction {
  id            String         @id @default(cuid())
  bookingId     String
  action        DepositAction
  amount        Int
  currency      String
  status        TransactionStatus @default(PENDING)
  transactionId String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  booking       Booking        @relation(fields: [bookingId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum BookingSource {
  DIRECT
  AIRBNB
  BOOKING_COM
  AVITO
  OTHER
}

enum DepositAction {
  HOLD
  RELEASE
  CHARGE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model ServiceProvider {
  id           String   @id @default(cuid())
  name         String
  serviceTypes String[]
  rating       Float?
  contact      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tasks        Task[]
  serviceOrders ServiceOrder[]
}

model Task {
  id                  String        @id @default(cuid())
  orgId               String
  unitId              String?
  bookingId           String?
  type                TaskType
  status              TaskStatus    @default(TODO)
  dueAt               DateTime?
  assignedProviderId  String?
  checklist           String[]
  note                String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  assignedProvider    ServiceProvider? @relation(fields: [assignedProviderId], references: [id])
  serviceOrders       ServiceOrder[]
}

model ServiceOrder {
  id          String            @id @default(cuid())
  orgId       String
  taskId      String
  providerId  String?
  status      ServiceOrderStatus @default(CREATED)
  costAmount  Int?
  costCurrency String?
  invoiceId   String?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  task        Task              @relation(fields: [taskId], references: [id])
  provider    ServiceProvider?  @relation(fields: [providerId], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum TaskType {
  CLEANING
  CHECKIN
  CHECKOUT
  MAINTENANCE
  INVENTORY
}

enum ServiceOrderStatus {
  CREATED
  ACCEPTED
  DONE
  CANCELED
}

model Invoice {
  id            String        @id @default(cuid())
  orgId         String
  orderId       String?
  totalAmount   Int
  totalCurrency String
  status        InvoiceStatus @default(OPEN)
  issuedAt      DateTime
  dueAt         DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         InvoiceItem[]
  payments      Payment[]
}

model InvoiceItem {
  id              String  @id @default(cuid())
  invoiceId       String
  name            String
  qty             Int
  priceAmount     Int
  priceCurrency   String
  sumAmount       Int
  sumCurrency     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(cuid())
  invoiceId     String
  method        PaymentMethod
  amountAmount  Int
  amountCurrency String
  status        PaymentStatus @default(PENDING)
  provider      String?
  providerRef   String?
  receiptUrl    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  invoice       Invoice       @relation(fields: [invoiceId], references: [id])
}

enum InvoiceStatus {
  OPEN
  PAID
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum PaymentMethod {
  CARD
  CASH
  TRANSFER
  OTHER
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  orgId     String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([userId, orgId])
}

enum Role {
  OWNER
  MANAGER
  STAFF
}

model Listing {
  id          String        @id @default(cuid())
  unitId      String
  status      ListingStatus @default(DRAFT)
  channel     Channel
  basePriceAmount    Int
  basePriceCurrency  String
  minNights   Int
  maxNights   Int?
  externalId  String?
  lastSyncAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  discounts   DiscountRule[]
}

model DiscountRule {
  id          String  @id @default(cuid())
  listingId   String
  name        String
  percentOff  Int
  minNights   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  listing     Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

enum ListingStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Channel {
  DIRECT
  AIRBNB
  BOOKING
  AVITO
}

model LegalDocument {
  id        String   @id @default(cuid())
  type      String
  url       String
  bookingId String?
  meta      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LegalDepositTransaction {
  id            String   @id @default(cuid())
  bookingId     String
  holdAmount    Int
  holdCurrency  String
  capturedAmount Int?
  capturedCurrency String?
  refundedAmount Int?
  refundedCurrency String?
  method        String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}