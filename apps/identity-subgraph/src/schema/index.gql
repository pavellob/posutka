# Общие типы
scalar UUID
scalar DateTime
scalar JSON

type Money {
  amount: Int!
  currency: String!
}

input MoneyInput {
  amount: Int!
  currency: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
  totalCount: Int
}

enum DepositAction {
  HOLD
  RELEASE
  CHARGE
  CAPTURE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Channel {
  DIRECT
  AIRBNB
  BOOKING_COM
  AVITO
  OTHER
}

enum Role {
  OWNER
  MANAGER
  STAFF
}

# Пользователь
type User {
  id: UUID!
  email: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Организация
type Organization {
  id: UUID!
  name: String!
  timezone: String!
  currency: String!
  members: [Membership!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Членство
type Membership {
  id: UUID!
  user: User!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Пагинация

type UserEdge {
  node: User!
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type OrganizationEdge {
  node: Organization!
  cursor: String!
}

type OrganizationConnection {
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

type Query {
  user(id: UUID!): User
  userByEmail(email: String!): User
  users(first: Int, after: String): UserConnection!
  
  organization(id: UUID!): Organization
  organizations(first: Int, after: String): OrganizationConnection!
  organizationsByUserId(userId: UUID!): [Organization!]!
  
  membership(id: UUID!): Membership
  membershipsByOrg(orgId: UUID!): [Membership!]!
  membershipsByUser(userId: UUID!): [Membership!]!
}

input CreateUserInput {
  email: String!
  name: String
}

input CreateOrganizationInput {
  name: String!
  timezone: String!
  currency: String!
}

input AddMemberInput {
  userId: UUID!
  orgId: UUID!
  role: Role!
}

input UpdateMemberRoleInput {
  membershipId: UUID!
  role: Role!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: UUID!, input: CreateUserInput!): User!
  
  createOrganization(input: CreateOrganizationInput!): Organization!
  updateOrganization(id: UUID!, input: CreateOrganizationInput!): Organization!
  
  addMember(input: AddMemberInput!): Membership!
  updateMemberRole(input: UpdateMemberRoleInput!): Membership!
  removeMember(membershipId: UUID!): Boolean!
}
