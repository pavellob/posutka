/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GQLPT –≤ AI subgraph
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º—É—Ç–∞—Ü–∏–∏
 * –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
 */

import { AIOrchestratorService } from '../services/ai-orchestrator.service.js';
import type { AIAdapterConfig } from '@repo/datalayer';

// –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è OpenAI
const openaiConfig: AIAdapterConfig = {
  type: 'openai',
  apiKey: process.env.OPENAI_API_KEY || 'your-openai-api-key',
  model: 'gpt-4',
};

// –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Anthropic
const anthropicConfig: AIAdapterConfig = {
  type: 'anthropic',
  apiKey: process.env.ANTHROPIC_API_KEY || 'your-anthropic-api-key',
  model: 'claude-3-sonnet-20240229',
};

async function exampleUsage() {
  const orchestrator = new AIOrchestratorService();
  const orgId = '123e4567-e89b-12d3-a456-426614174000';

  console.log('üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GQLPT –≤ AI subgraph\n');

  try {
    // –ü—Ä–∏–º–µ—Ä 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('üìù –ü—Ä–∏–º–µ—Ä 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
    const simpleQuery = await orchestrator.generateGraphQLQuery(
      orgId,
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ò–≤–∞–Ω"',
      openaiConfig
    );
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(simpleQuery, null, 2));
    console.log('');

    // –ü—Ä–∏–º–µ—Ä 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    console.log('üìù –ü—Ä–∏–º–µ—Ä 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º');
    const complexQuery = await orchestrator.generateGraphQLQuery(
      orgId,
      '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      anthropicConfig,
      {
        availableTypes: ['Booking', 'User', 'Organization'],
        dateRange: 'last_month',
        includeDetails: true
      }
    );
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(complexQuery, null, 2));
    console.log('');

    // –ü—Ä–∏–º–µ—Ä 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (simpleQuery.success && simpleQuery.query) {
      console.log('üìù –ü—Ä–∏–º–µ—Ä 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
      const executionResult = await orchestrator.executeGeneratedQuery(
        orgId,
        simpleQuery.query,
        simpleQuery.variables
      );
      
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', JSON.stringify(executionResult, null, 2));
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä GraphQL –º—É—Ç–∞—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–ª–∏–µ–Ω—Ç–µ
export const exampleMutations = {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–∞
  generateQuery: `
    mutation GenerateGraphQLQuery($orgId: UUID!, $description: String!, $adapterConfig: AIAdapterConfig!) {
      generateGraphQLQuery(
        orgId: $orgId
        description: $description
        adapterConfig: $adapterConfig
      ) {
        query
        variables
        description
        success
        error
      }
    }
  `,

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  executeQuery: `
    mutation ExecuteGeneratedQuery($orgId: UUID!, $query: String!, $variables: JSON) {
      executeGeneratedQuery(
        orgId: $orgId
        query: $query
        variables: $variables
      )
    }
  `,

  // –û–±—ã—á–Ω–∞—è AI –∫–æ–º–∞–Ω–¥–∞
  aiCommand: `
    mutation AICommand($orgId: UUID!, $command: String!, $context: JSON) {
      aiCommand(
        orgId: $orgId
        command: $command
        context: $context
      ) {
        ok
        message
        affectedIds
        preview
      }
    }
  `
};

// –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –º—É—Ç–∞—Ü–∏–π
export const exampleVariables = {
  generateQuery: {
    orgId: '123e4567-e89b-12d3-a456-426614174000',
    description: '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ò–≤–∞–Ω"',
    adapterConfig: {
      type: 'openai',
      apiKey: 'your-api-key',
      model: 'gpt-4'
    }
  },
  
  executeQuery: {
    orgId: '123e4567-e89b-12d3-a456-426614174000',
    query: 'query($name: String!) { users(where: { name: { equals: $name } }) { id name } }',
    variables: { name: '–ò–≤–∞–Ω' }
  },
  
  aiCommand: {
    orgId: '123e4567-e89b-12d3-a456-426614174000',
    command: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω',
    context: { userId: 'user-123', checkIn: '2024-01-15', checkOut: '2024-01-20' }
  }
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  exampleUsage().catch(console.error);
}
