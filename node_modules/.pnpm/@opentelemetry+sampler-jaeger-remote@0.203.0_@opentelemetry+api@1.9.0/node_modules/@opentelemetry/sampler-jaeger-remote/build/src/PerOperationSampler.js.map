{"version":3,"file":"PerOperationSampler.js","sourceRoot":"","sources":["../../src/PerOperationSampler.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,kEAIuC;AAUvC,8DAA8D;AAC9D,MAAa,mBAAmB;IACtB,eAAe,CAAU;IACzB,oBAAoB,CAAuB;IAEnD,YAAY,MAAkC;QAC5C,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,cAAc,CAAC;QAC7C,IAAI,CAAC,oBAAoB,GAAG,IAAI,GAAG,CACjC,MAAM,CAAC,sBAAsB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACxD,oBAAoB,CAAC,SAAS;YAC9B,IAAI,yCAAwB,CAC1B,oBAAoB,CAAC,qBAAqB,CAAC,YAAY,CACxD;SACF,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,sBAAsB,CAAC,QAAgB;QAC7C,IAAI,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,gBAAgB,IAAI,IAAI,EAAE;YAC5B,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC;SACzC;QACD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,YAAY,CACV,OAAgB,EAChB,OAAe,EACf,QAAgB,EAChB,QAAkB,EAClB,UAA0B,EAC1B,KAAa;QAEb,OAAO,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,YAAY,CACvD,OAAO,EACP,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,KAAK,CACN,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,OAAO,+BACL,IAAI,CAAC,eACP,2BAA2B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAClE,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,IAAI,KAAK,EAAE,CACpC,IAAI,CAAC;IACR,CAAC;CACF;AAjDD,kDAiDC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, SpanKind, Link, SpanAttributes } from '@opentelemetry/api';\nimport {\n  Sampler,\n  SamplingResult,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/sdk-trace-base';\nimport { PerOperationStrategy } from './types';\n\ninterface PerOperationSamplerOptions {\n  /** The default sampler to use in case span does not have a custom strategy. */\n  defaultSampler: Sampler;\n  /** Stores strategies for every custom span. */\n  perOperationStrategies: PerOperationStrategy[];\n}\n\n/** PerOperationSampler to be used from JaegerRemoteSampler */\nexport class PerOperationSampler implements Sampler {\n  private _defaultSampler: Sampler;\n  private _perOperationSampler: Map<string, Sampler>;\n\n  constructor(config: PerOperationSamplerOptions) {\n    this._defaultSampler = config.defaultSampler;\n    this._perOperationSampler = new Map<string, Sampler>(\n      config.perOperationStrategies.map(perOperationStrategy => [\n        perOperationStrategy.operation,\n        new TraceIdRatioBasedSampler(\n          perOperationStrategy.probabilisticSampling.samplingRate\n        ),\n      ])\n    );\n  }\n\n  private getSamplerForOperation(spanName: string): Sampler {\n    let resultantSampler = this._perOperationSampler.get(spanName);\n    if (resultantSampler == null) {\n      resultantSampler = this._defaultSampler;\n    }\n    return resultantSampler;\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    return this.getSamplerForOperation(spanName).shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `PerOperationSampler{default=${\n      this._defaultSampler\n    }, perOperationSamplers={${Array.from(this._perOperationSampler).map(\n      ([key, value]) => `${key}=${value}`\n    )}}}`;\n  }\n}\n"]}