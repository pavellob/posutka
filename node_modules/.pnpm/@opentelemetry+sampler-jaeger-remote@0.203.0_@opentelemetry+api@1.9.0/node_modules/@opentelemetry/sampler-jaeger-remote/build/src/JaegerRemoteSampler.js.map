{"version":3,"file":"JaegerRemoteSampler.js","sourceRoot":"","sources":["../../src/JaegerRemoteSampler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Link, SpanKind, Attributes, diag, Context } from '@opentelemetry/api';\nimport {\n  Sampler,\n  SamplingResult,\n  ParentBasedSampler,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/sdk-trace-base';\nimport * as axios from 'axios';\nimport { PerOperationSampler } from './PerOperationSampler';\nimport { SamplingStrategyResponse, StrategyType } from './types';\n\ninterface JaegerRemoteSamplerOptions {\n  /** Address of a service that implements the Remote Sampling API, such as Jaeger Collector or OpenTelemetry Collector */\n  endpoint: string;\n  /** Service name for Remote Sampling API */\n  serviceName?: string;\n  /** Polling interval for getting configuration from remote */\n  poolingInterval: number;\n  /** Initial sampler that is used before the first configuration is fetched */\n  initialSampler: Sampler;\n}\n\n/** JaegerRemoteSampler */\nexport class JaegerRemoteSampler implements Sampler {\n  private _endpoint: string;\n  private _serviceName?: string;\n  private _poolingInterval: number;\n  private _sampler: Sampler;\n  private _syncingConfig: boolean;\n\n  constructor(config: JaegerRemoteSamplerOptions) {\n    this._endpoint = config.endpoint;\n    this._serviceName = config.serviceName;\n    this._poolingInterval = config.poolingInterval;\n    this._sampler = config.initialSampler;\n    this._syncingConfig = false;\n\n    setInterval(async () => {\n      if (this._syncingConfig) {\n        return;\n      }\n      this._syncingConfig = true;\n      try {\n        await this.getAndUpdateSampler();\n      } catch (err) {\n        diag.warn('Could not update sampler', err);\n      } finally {\n        this._syncingConfig = false;\n      }\n    }, this._poolingInterval);\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: Attributes,\n    links: Link[]\n  ): SamplingResult {\n    return this._sampler.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `JaegerRemoteSampler{endpoint=${this._endpoint},${\n      this._serviceName && ` serviceName=${this._serviceName},`\n    } poolingInterval=${this._poolingInterval}, sampler=${this._sampler}}`;\n  }\n\n  private async getAndUpdateSampler() {\n    const newConfig = await this.getSamplerConfig(this._serviceName);\n    this._sampler = await this.convertSamplingResponseToSampler(newConfig);\n  }\n\n  private convertSamplingResponseToSampler(\n    newConfig: SamplingStrategyResponse\n  ): Sampler {\n    const perOperationStrategies =\n      newConfig.operationSampling?.perOperationStrategies;\n    if (\n      newConfig.operationSampling &&\n      perOperationStrategies &&\n      perOperationStrategies.length > 0\n    ) {\n      const defaultSampler: Sampler = new TraceIdRatioBasedSampler(\n        newConfig.operationSampling.defaultSamplingProbability\n      );\n      return new ParentBasedSampler({\n        root: new PerOperationSampler({\n          defaultSampler,\n          perOperationStrategies,\n        }),\n      });\n    }\n    switch (newConfig.strategyType) {\n      case StrategyType.PROBABILISTIC:\n        return new ParentBasedSampler({\n          root: new TraceIdRatioBasedSampler(\n            newConfig.probabilisticSampling.samplingRate\n          ),\n        });\n      default:\n        diag.warn(`Strategy ${newConfig.strategyType} not supported.`);\n        return this._sampler;\n    }\n  }\n\n  private async getSamplerConfig(\n    serviceName?: string\n  ): Promise<SamplingStrategyResponse> {\n    const response = await axios.get<SamplingStrategyResponse>(\n      `${this._endpoint}/sampling?service=${serviceName ?? ''}`\n    );\n    return response.data;\n  }\n}\n"]}