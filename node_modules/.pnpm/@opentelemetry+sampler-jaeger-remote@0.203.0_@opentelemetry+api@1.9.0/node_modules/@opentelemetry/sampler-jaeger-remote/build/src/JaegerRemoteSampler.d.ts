import { Link, SpanKind, Attributes, Context } from '@opentelemetry/api';
import { Sampler, SamplingResult } from '@opentelemetry/sdk-trace-base';
interface JaegerRemoteSamplerOptions {
    /** Address of a service that implements the Remote Sampling API, such as Jaeger Collector or OpenTelemetry Collector */
    endpoint: string;
    /** Service name for Remote Sampling API */
    serviceName?: string;
    /** Polling interval for getting configuration from remote */
    poolingInterval: number;
    /** Initial sampler that is used before the first configuration is fetched */
    initialSampler: Sampler;
}
/** JaegerRemoteSampler */
export declare class JaegerRemoteSampler implements Sampler {
    private _endpoint;
    private _serviceName?;
    private _poolingInterval;
    private _sampler;
    private _syncingConfig;
    constructor(config: JaegerRemoteSamplerOptions);
    shouldSample(context: Context, traceId: string, spanName: string, spanKind: SpanKind, attributes: Attributes, links: Link[]): SamplingResult;
    toString(): string;
    private getAndUpdateSampler;
    private convertSamplingResponseToSampler;
    private getSamplerConfig;
}
export {};
//# sourceMappingURL=JaegerRemoteSampler.d.ts.map