"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerOperationSampler = void 0;
const sdk_trace_base_1 = require("@opentelemetry/sdk-trace-base");
/** PerOperationSampler to be used from JaegerRemoteSampler */
class PerOperationSampler {
    _defaultSampler;
    _perOperationSampler;
    constructor(config) {
        this._defaultSampler = config.defaultSampler;
        this._perOperationSampler = new Map(config.perOperationStrategies.map(perOperationStrategy => [
            perOperationStrategy.operation,
            new sdk_trace_base_1.TraceIdRatioBasedSampler(perOperationStrategy.probabilisticSampling.samplingRate),
        ]));
    }
    getSamplerForOperation(spanName) {
        let resultantSampler = this._perOperationSampler.get(spanName);
        if (resultantSampler == null) {
            resultantSampler = this._defaultSampler;
        }
        return resultantSampler;
    }
    shouldSample(context, traceId, spanName, spanKind, attributes, links) {
        return this.getSamplerForOperation(spanName).shouldSample(context, traceId, spanName, spanKind, attributes, links);
    }
    toString() {
        return `PerOperationSampler{default=${this._defaultSampler}, perOperationSamplers={${Array.from(this._perOperationSampler).map(([key, value]) => `${key}=${value}`)}}}`;
    }
}
exports.PerOperationSampler = PerOperationSampler;
//# sourceMappingURL=PerOperationSampler.js.map