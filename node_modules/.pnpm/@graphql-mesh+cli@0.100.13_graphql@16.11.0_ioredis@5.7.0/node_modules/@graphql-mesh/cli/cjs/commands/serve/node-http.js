"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.startNodeHttpServer = startNodeHttpServer;
/* eslint-disable import/no-nodejs-modules */
const fs_1 = require("fs");
const getGraphQLWSOpts_js_1 = require("./getGraphQLWSOpts.js");
async function startNodeHttpServer({ meshHTTPHandler, getBuiltMesh, sslCredentials, graphqlPath, hostname, port, }) {
    let server;
    if (sslCredentials) {
        const [key, cert] = await Promise.all([
            fs_1.promises.readFile(sslCredentials.key),
            fs_1.promises.readFile(sslCredentials.cert),
        ]);
        const nodeHttps = await Promise.resolve().then(() => __importStar(require('https')));
        server = nodeHttps.createServer({
            key,
            cert,
        }, meshHTTPHandler);
    }
    else {
        const nodeHttp = await Promise.resolve().then(() => __importStar(require('http')));
        server = nodeHttp.createServer(meshHTTPHandler);
    }
    const ws = await Promise.resolve().then(() => __importStar(require('ws')));
    const wsServer = new ws.WebSocketServer({
        path: graphqlPath,
        server,
    });
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore - GraphQL WS has some issues with Bob
    const { useServer } = await Promise.resolve().then(() => __importStar(require('graphql-ws/use/ws')));
    useServer((0, getGraphQLWSOpts_js_1.getGraphQLWSOptions)(getBuiltMesh), wsServer);
    return new Promise((resolve, reject) => {
        server.once('error', err => reject(err));
        server.listen(port, hostname, () => {
            resolve({
                stop: () => new Promise((resolve, reject) => {
                    server.closeAllConnections();
                    server.close(err => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                }),
            });
        });
    });
}
