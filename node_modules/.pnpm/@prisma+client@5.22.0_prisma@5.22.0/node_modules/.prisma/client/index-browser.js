
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  timezone: 'timezone',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  title: 'title',
  address: 'address',
  amenities: 'amenities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  name: 'name',
  capacity: 'capacity',
  beds: 'beds',
  bathrooms: 'bathrooms',
  amenities: 'amenities',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarBlockScalarFieldEnum = {
  id: 'id',
  unitId: 'unitId',
  from: 'from',
  to: 'to',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GuestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  unitId: 'unitId',
  guestId: 'guestId',
  status: 'status',
  source: 'source',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  guestsCount: 'guestsCount',
  basePriceAmount: 'basePriceAmount',
  basePriceCurrency: 'basePriceCurrency',
  cleaningFeeAmount: 'cleaningFeeAmount',
  cleaningFeeCurrency: 'cleaningFeeCurrency',
  serviceFeeAmount: 'serviceFeeAmount',
  serviceFeeCurrency: 'serviceFeeCurrency',
  taxesAmount: 'taxesAmount',
  taxesCurrency: 'taxesCurrency',
  totalAmount: 'totalAmount',
  totalCurrency: 'totalCurrency',
  notes: 'notes',
  cancellationReason: 'cancellationReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  type: 'type',
  template: 'template',
  content: 'content',
  signedAt: 'signedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepositTransactionScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  action: 'action',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  transactionId: 'transactionId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  serviceTypes: 'serviceTypes',
  rating: 'rating',
  contact: 'contact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  unitId: 'unitId',
  bookingId: 'bookingId',
  type: 'type',
  status: 'status',
  dueAt: 'dueAt',
  assignedProviderId: 'assignedProviderId',
  checklist: 'checklist',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceOrderScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  taskId: 'taskId',
  providerId: 'providerId',
  status: 'status',
  costAmount: 'costAmount',
  costCurrency: 'costCurrency',
  invoiceId: 'invoiceId',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  orderId: 'orderId',
  totalAmount: 'totalAmount',
  totalCurrency: 'totalCurrency',
  status: 'status',
  issuedAt: 'issuedAt',
  dueAt: 'dueAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  name: 'name',
  qty: 'qty',
  priceAmount: 'priceAmount',
  priceCurrency: 'priceCurrency',
  sumAmount: 'sumAmount',
  sumCurrency: 'sumCurrency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  method: 'method',
  amountAmount: 'amountAmount',
  amountCurrency: 'amountCurrency',
  status: 'status',
  provider: 'provider',
  providerRef: 'providerRef',
  receiptUrl: 'receiptUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  unitId: 'unitId',
  status: 'status',
  channel: 'channel',
  basePriceAmount: 'basePriceAmount',
  basePriceCurrency: 'basePriceCurrency',
  minNights: 'minNights',
  maxNights: 'maxNights',
  externalId: 'externalId',
  lastSyncAt: 'lastSyncAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscountRuleScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  name: 'name',
  percentOff: 'percentOff',
  minNights: 'minNights',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LegalDocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  url: 'url',
  bookingId: 'bookingId',
  meta: 'meta',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LegalDepositTransactionScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  holdAmount: 'holdAmount',
  holdCurrency: 'holdCurrency',
  capturedAmount: 'capturedAmount',
  capturedCurrency: 'capturedCurrency',
  refundedAmount: 'refundedAmount',
  refundedCurrency: 'refundedCurrency',
  method: 'method',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  NO_SHOW: 'NO_SHOW'
};

exports.BookingSource = exports.$Enums.BookingSource = {
  DIRECT: 'DIRECT',
  AIRBNB: 'AIRBNB',
  BOOKING_COM: 'BOOKING_COM',
  AVITO: 'AVITO',
  OTHER: 'OTHER'
};

exports.DepositAction = exports.$Enums.DepositAction = {
  HOLD: 'HOLD',
  RELEASE: 'RELEASE',
  CHARGE: 'CHARGE',
  REFUND: 'REFUND'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.TaskType = exports.$Enums.TaskType = {
  CLEANING: 'CLEANING',
  CHECKIN: 'CHECKIN',
  CHECKOUT: 'CHECKOUT',
  MAINTENANCE: 'MAINTENANCE',
  INVENTORY: 'INVENTORY'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  DONE: 'DONE',
  CANCELED: 'CANCELED'
};

exports.ServiceOrderStatus = exports.$Enums.ServiceOrderStatus = {
  CREATED: 'CREATED',
  ACCEPTED: 'ACCEPTED',
  DONE: 'DONE',
  CANCELED: 'CANCELED'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  OPEN: 'OPEN',
  PAID: 'PAID',
  CANCELED: 'CANCELED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CARD: 'CARD',
  CASH: 'CASH',
  TRANSFER: 'TRANSFER',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELED: 'CANCELED'
};

exports.Role = exports.$Enums.Role = {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED'
};

exports.Channel = exports.$Enums.Channel = {
  DIRECT: 'DIRECT',
  AIRBNB: 'AIRBNB',
  BOOKING: 'BOOKING',
  AVITO: 'AVITO'
};

exports.Prisma.ModelName = {
  Organization: 'Organization',
  Property: 'Property',
  Unit: 'Unit',
  CalendarBlock: 'CalendarBlock',
  Guest: 'Guest',
  Booking: 'Booking',
  Document: 'Document',
  DepositTransaction: 'DepositTransaction',
  ServiceProvider: 'ServiceProvider',
  Task: 'Task',
  ServiceOrder: 'ServiceOrder',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem',
  Payment: 'Payment',
  User: 'User',
  Membership: 'Membership',
  Listing: 'Listing',
  DiscountRule: 'DiscountRule',
  LegalDocument: 'LegalDocument',
  LegalDepositTransaction: 'LegalDepositTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
