{"version":3,"file":"secretsmanager.js","sourceRoot":"","sources":["../../../src/services/secretsmanager.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,4CAAwE;AACxE,wCAAgE;AAQhE,MAAa,8BAA8B;IACzC,kBAAkB,CAChB,OAA0B,EAC1B,OAAoC;QAEpC,MAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC;QAChD,MAAM,QAAQ,GAAa,cAAQ,CAAC,MAAM,CAAC;QAC3C,IAAI,QAA4B,CAAC;QACjC,MAAM,cAAc,GAAe,EAAE,CAAC;QACtC,IACE,OAAO,QAAQ,KAAK,QAAQ;YAC5B,QAAQ,CAAC,UAAU,CAAC,yBAAyB,CAAC,EAC9C;YACA,cAAc,CAAC,4CAAkC,CAAC,GAAG,QAAQ,CAAC;SAC/D;QAED,OAAO;YACL,UAAU,EAAE,KAAK;YACjB,cAAc;YACd,QAAQ;YACR,QAAQ;SACT,CAAC;IACJ,CAAC;IAED,YAAY,CACV,QAA4B,EAC5B,IAAU,EACV,MAAc,EACd,MAAmC;QAEnC,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC;QACrC,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,YAAY,CAAC,4CAAkC,EAAE,SAAS,CAAC,CAAC;SAClE;IACH,CAAC;CACF;AAnCD,wEAmCC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Attributes, Span, SpanKind, Tracer } from '@opentelemetry/api';\nimport { ATTR_AWS_SECRETSMANAGER_SECRET_ARN } from '../semconv';\nimport { RequestMetadata, ServiceExtension } from './ServiceExtension';\nimport {\n  NormalizedRequest,\n  NormalizedResponse,\n  AwsSdkInstrumentationConfig,\n} from '../types';\n\nexport class SecretsManagerServiceExtension implements ServiceExtension {\n  requestPreSpanHook(\n    request: NormalizedRequest,\n    _config: AwsSdkInstrumentationConfig\n  ): RequestMetadata {\n    const secretId = request.commandInput?.SecretId;\n    const spanKind: SpanKind = SpanKind.CLIENT;\n    let spanName: string | undefined;\n    const spanAttributes: Attributes = {};\n    if (\n      typeof secretId === 'string' &&\n      secretId.startsWith('arn:aws:secretsmanager:')\n    ) {\n      spanAttributes[ATTR_AWS_SECRETSMANAGER_SECRET_ARN] = secretId;\n    }\n\n    return {\n      isIncoming: false,\n      spanAttributes,\n      spanKind,\n      spanName,\n    };\n  }\n\n  responseHook(\n    response: NormalizedResponse,\n    span: Span,\n    tracer: Tracer,\n    config: AwsSdkInstrumentationConfig\n  ): void {\n    const secretArn = response.data?.ARN;\n    if (secretArn) {\n      span.setAttribute(ATTR_AWS_SECRETSMANAGER_SECRET_ARN, secretArn);\n    }\n  }\n}\n"]}