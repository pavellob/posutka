"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderWarnings = exports.renderChanges = exports.renderErrors = exports.RenderErrors_SchemaErrorConnectionFragment = void 0;
exports.loadSchema = loadSchema;
exports.minifySchema = minifySchema;
const graphql_1 = require("graphql");
const code_file_loader_1 = require("@graphql-tools/code-file-loader");
const graphql_file_loader_1 = require("@graphql-tools/graphql-file-loader");
const json_file_loader_1 = require("@graphql-tools/json-file-loader");
const load_1 = require("@graphql-tools/load");
const url_loader_1 = require("@graphql-tools/url-loader");
const gql_1 = require("../gql");
const graphql_2 = require("../gql/graphql");
const texture_1 = require("./texture/texture");
const severityLevelMap = {
    [graphql_2.SeverityLevelType.Breaking]: texture_1.Texture.colors.red('-'),
    [graphql_2.SeverityLevelType.Safe]: texture_1.Texture.colors.green('-'),
    [graphql_2.SeverityLevelType.Dangerous]: texture_1.Texture.colors.green('-'),
};
exports.RenderErrors_SchemaErrorConnectionFragment = (0, gql_1.graphql)(`
  fragment RenderErrors_SchemaErrorConnectionFragment on SchemaErrorConnection {
    edges {
      node {
        message
      }
    }
  }
`);
const renderErrors = (errors) => {
    const e = (0, gql_1.useFragment)(exports.RenderErrors_SchemaErrorConnectionFragment, errors);
    const t = texture_1.Texture.createBuilder();
    t.failure(`Detected ${e.edges.length} error${e.edges.length > 1 ? 's' : ''}`);
    t.line();
    e.edges.forEach(edge => {
        t.indent(texture_1.Texture.colors.red('-') + ' ' + texture_1.Texture.boldQuotedWords(edge.node.message));
    });
    return t.state.value;
};
exports.renderErrors = renderErrors;
const RenderChanges_SchemaChanges = (0, gql_1.graphql)(`
  fragment RenderChanges_schemaChanges on SchemaChangeConnection {
    edges {
      node {
        severityLevel
        isSafeBasedOnUsage
        message(withSafeBasedOnUsageNote: false)
        approval {
          approvedBy {
            displayName
          }
        }
      }
    }
  }
`);
const renderChanges = (maskedChanges) => {
    const t = texture_1.Texture.createBuilder();
    const changes = (0, gql_1.useFragment)(RenderChanges_SchemaChanges, maskedChanges);
    const writeChanges = (changes) => {
        changes.forEach(change => {
            var _a, _b;
            const messageParts = [
                severityLevelMap[change.isSafeBasedOnUsage ? graphql_2.SeverityLevelType.Safe : change.severityLevel],
                texture_1.Texture.boldQuotedWords(change.message),
            ];
            if (change.isSafeBasedOnUsage) {
                messageParts.push(texture_1.Texture.colors.green('(Safe based on usage ✓)'));
            }
            if (change.approval) {
                messageParts.push(texture_1.Texture.colors.green(`(Approved by ${(_b = (_a = change.approval.approvedBy) === null || _a === void 0 ? void 0 : _a.displayName) !== null && _b !== void 0 ? _b : '<unknown>'} ✓)`));
            }
            t.indent(messageParts.join(' '));
        });
    };
    t.info(`Detected ${changes.edges.length} change${changes.edges.length > 1 ? 's' : ''}`);
    t.line();
    const breakingChanges = changes.edges.filter(edge => edge.node.severityLevel === graphql_2.SeverityLevelType.Breaking);
    const dangerousChanges = changes.edges.filter(edge => edge.node.severityLevel === graphql_2.SeverityLevelType.Dangerous);
    const safeChanges = changes.edges.filter(edge => edge.node.severityLevel === graphql_2.SeverityLevelType.Safe);
    const otherChanges = changes.edges.filter(edge => !Object.values(graphql_2.SeverityLevelType).includes(edge.node.severityLevel));
    if (breakingChanges.length) {
        t.indent(`Breaking changes:`);
        writeChanges(breakingChanges.map(edge => edge.node));
    }
    if (dangerousChanges.length) {
        t.indent(`Dangerous changes:`);
        writeChanges(dangerousChanges.map(edge => edge.node));
    }
    if (safeChanges.length) {
        t.indent(`Safe changes:`);
        writeChanges(safeChanges.map(edge => edge.node));
    }
    // For backwards compatibility in case more severity levels are added.
    // This is unlikely to happen.
    if (otherChanges.length) {
        t.indent(`Other changes: (Current CLI version does not support these SeverityLevels)`);
        writeChanges(otherChanges.map(edge => edge.node));
    }
    return t.state.value;
};
exports.renderChanges = renderChanges;
const renderWarnings = (warnings) => {
    const t = texture_1.Texture.createBuilder();
    t.line();
    t.warning(`Detected ${warnings.total} warning${warnings.total > 1 ? 's' : ''}`);
    t.line();
    warnings.nodes.forEach(warning => {
        const details = [
            warning.source ? `source: ${texture_1.Texture.boldQuotedWords(warning.source)}` : undefined,
        ]
            .filter(Boolean)
            .join(', ');
        t.indent(`- ${texture_1.Texture.boldQuotedWords(warning.message)}${details ? ` (${details})` : ''}`);
    });
    return t.state.value;
};
exports.renderWarnings = renderWarnings;
async function loadSchema(file, options) {
    const sources = await (0, load_1.loadTypedefs)(file, Object.assign(Object.assign({}, options), { cwd: process.cwd(), loaders: [new code_file_loader_1.CodeFileLoader(), new graphql_file_loader_1.GraphQLFileLoader(), new json_file_loader_1.JsonFileLoader(), new url_loader_1.UrlLoader()] }));
    return (0, graphql_1.print)((0, graphql_1.concatAST)(sources.map(s => s.document)));
}
function minifySchema(schema) {
    return schema.replace(/\s+/g, ' ').trim();
}
//# sourceMappingURL=schema.js.map