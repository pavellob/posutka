# Identity Subgraph - Управление пользователями и организациями
# Отвечает за аутентификацию, авторизацию и управление членством

# Общие типы
scalar UUID
scalar DateTime
scalar JSON

"""
Денежная сумма с валютой.
Amount хранится в копейках/центах для точности вычислений.
Пример: {amount: 150000, currency: "RUB"} = 1500.00 RUB
"""
type Money {
  """Сумма в копейках/центах (минимальная единица валюты)"""
  amount: Int!
  """Код валюты в формате ISO 4217 (RUB, USD, EUR)"""
  currency: String!
}

"""
Входные данные для денежной суммы.
Используется в мутациях для создания/обновления денежных значений.
"""
input MoneyInput {
  """Сумма в копейках/центах"""
  amount: Int!
  """Код валюты в формате ISO 4217"""
  currency: String!
}

"""
Информация о пагинации для соединений (connections).
Используется в GraphQL для реализации cursor-based пагинации.
"""
type PageInfo {
  """Есть ли следующая страница результатов"""
  hasNextPage: Boolean!
  """Есть ли предыдущая страница результатов"""
  hasPreviousPage: Boolean!
  """Курсор для начала текущей страницы"""
  startCursor: String
  """Курсор для конца текущей страницы"""
  endCursor: String
  """Общее количество элементов (опционально)"""
  totalCount: Int
}

"""
Действия с депозитом/залогом.
Используется для управления залогами при бронировании.
"""
enum DepositAction {
  """Заблокировать средства на карте гостя"""
  HOLD
  """Разблокировать заблокированные средства"""
  RELEASE
  """Списать средства с карты гостя"""
  CHARGE
  """Подтвердить списание (окончательно)"""
  CAPTURE
  """Вернуть средства гостю"""
  REFUND
}

"""
Статус транзакции в системе.
"""
enum TransactionStatus {
  """Транзакция в процессе обработки"""
  PENDING
  """Транзакция успешно завершена"""
  COMPLETED
  """Транзакция не удалась"""
  FAILED
}

"""
Каналы продаж для бронирований.
Определяет источник бронирования.
"""
enum Channel {
  """Прямое бронирование через сайт/приложение"""
  DIRECT
  """Бронирование через Airbnb"""
  AIRBNB
  """Бронирование через Booking.com"""
  BOOKING_COM
  """Бронирование через Avito"""
  AVITO
  """Другие каналы продаж"""
  OTHER
}

"""
Роли пользователей в организации.
Определяет уровень доступа и права.
"""
enum Role {
  """Владелец организации - полный доступ ко всем функциям"""
  OWNER
  """Менеджер - управление бронированиями и операциями"""
  MANAGER
  """Сотрудник - ограниченный доступ к функциям"""
  STAFF
}

"""
Пользователь системы.
Представляет физическое лицо, которое может работать с платформой.
"""
type User {
  """Уникальный идентификатор пользователя"""
  id: UUID!
  """Email адрес пользователя (уникальный)"""
  email: String!
  """Полное имя пользователя (опционально)"""
  name: String
  """Дата и время создания аккаунта"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
}

"""
Организация (компания, отель, хостел и т.д.).
Основная единица для группировки пользователей и управления недвижимостью.
"""
type Organization {
  """Уникальный идентификатор организации"""
  id: UUID!
  """Название организации"""
  name: String!
  """Часовой пояс организации (например, "Europe/Moscow")"""
  timezone: String!
  """Основная валюта организации (ISO 4217 код)"""
  currency: String!
  """Список всех участников организации"""
  members: [Membership!]!
  """Дата и время создания организации"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
}

"""
Членство пользователя в организации.
Связывает пользователя с организацией и определяет его роль.
"""
type Membership {
  """Уникальный идентификатор членства"""
  id: UUID!
  """Пользователь, который является членом организации"""
  user: User!
  """Роль пользователя в организации"""
  role: Role!
  """Дата и время добавления в организацию"""
  createdAt: DateTime!
  """Дата и время последнего обновления роли"""
  updatedAt: DateTime!
}

# Пагинация

"""
Элемент списка пользователей для пагинации.
"""
type UserEdge {
  """Пользователь"""
  node: User!
  """Курсор для пагинации"""
  cursor: String!
}

"""
Соединение пользователей с пагинацией.
"""
type UserConnection {
  """Список пользователей с курсорами"""
  edges: [UserEdge!]!
  """Информация о пагинации"""
  pageInfo: PageInfo!
}

"""
Элемент списка организаций для пагинации.
"""
type OrganizationEdge {
  """Организация"""
  node: Organization!
  """Курсор для пагинации"""
  cursor: String!
}

"""
Соединение организаций с пагинацией.
"""
type OrganizationConnection {
  """Список организаций с курсорами"""
  edges: [OrganizationEdge!]!
  """Информация о пагинации"""
  pageInfo: PageInfo!
}

"""
Запросы для работы с пользователями, организациями и членством.
"""
type Query {
  """Получить текущего авторизованного пользователя"""
  me: User
  """Получить пользователя по ID"""
  user(id: UUID!): User
  """Получить пользователя по email адресу"""
  userByEmail(email: String!): User
  """Получить список пользователей с пагинацией"""
  users(first: Int, after: String): UserConnection!
  
  """Получить организацию по ID"""
  organization(id: UUID!): Organization
  """Получить список организаций с пагинацией"""
  organizations(first: Int, after: String): OrganizationConnection!
  """Получить все организации, в которых состоит пользователь"""
  organizationsByUserId(userId: UUID!): [Organization!]!
  
  """Получить членство по ID"""
  membership(id: UUID!): Membership
  """Получить всех участников организации"""
  membershipsByOrg(orgId: UUID!): [Membership!]!
  """Получить все членства пользователя"""
  membershipsByUser(userId: UUID!): [Membership!]!
}

"""
Входные данные для создания пользователя.
"""
input CreateUserInput {
  """Email адрес пользователя (обязательно)"""
  email: String!
  """Полное имя пользователя (опционально)"""
  name: String
}

"""
Входные данные для создания организации.
"""
input CreateOrganizationInput {
  """Название организации"""
  name: String!
  """Часовой пояс (например, "Europe/Moscow")"""
  timezone: String!
  """Основная валюта (ISO 4217 код, например "RUB")"""
  currency: String!
}

"""
Входные данные для добавления участника в организацию.
"""
input AddMemberInput {
  """ID пользователя для добавления"""
  userId: UUID!
  """ID организации"""
  orgId: UUID!
  """Роль пользователя в организации"""
  role: Role!
}

"""
Входные данные для обновления роли участника.
"""
input UpdateMemberRoleInput {
  """ID членства для обновления"""
  membershipId: UUID!
  """Новая роль пользователя"""
  role: Role!
}

"""
Результат аутентификации.
Содержит пользователя и токены доступа.
"""
type AuthPayload {
  """Пользователь"""
  user: User!
  """JWT токен доступа"""
  accessToken: String!
  """JWT токен обновления"""
  refreshToken: String!
  """Время жизни токена в секундах"""
  expiresIn: Int!
}

"""
Входные данные для регистрации.
"""
input RegisterInput {
  """Email адрес пользователя (обязательно)"""
  email: String!
  """Пароль пользователя (обязательно)"""
  password: String!
  """Полное имя пользователя (опционально)"""
  name: String
}

"""
Входные данные для входа в систему.
"""
input LoginInput {
  """Email адрес пользователя"""
  email: String!
  """Пароль пользователя"""
  password: String!
}

"""
Входные данные для обновления токена.
"""
input RefreshTokenInput {
  """JWT токен обновления"""
  refreshToken: String!
}

"""
Входные данные для сброса пароля.
"""
input ResetPasswordInput {
  """Токен сброса пароля"""
  token: String!
  """Новый пароль"""
  newPassword: String!
}

"""
Мутации для управления пользователями, организациями и членством.
"""
type Mutation {
  """Создать нового пользователя"""
  createUser(input: CreateUserInput!): User!
  """Обновить данные пользователя"""
  updateUser(id: UUID!, input: CreateUserInput!): User!
  
  """Зарегистрировать нового пользователя"""
  register(input: RegisterInput!): AuthPayload!
  """Войти в систему"""
  login(input: LoginInput!): AuthPayload!
  """Обновить токен доступа"""
  refreshToken(input: RefreshTokenInput!): AuthPayload!
  """Выйти из системы"""
  logout: Boolean!
  """Запросить сброс пароля"""
  forgotPassword(email: String!): Boolean!
  """Сбросить пароль"""
  resetPassword(input: ResetPasswordInput!): Boolean!
  
  """Создать новую организацию"""
  createOrganization(input: CreateOrganizationInput!): Organization!
  """Обновить данные организации"""
  updateOrganization(id: UUID!, input: CreateOrganizationInput!): Organization!
  
  """Добавить пользователя в организацию"""
  addMember(input: AddMemberInput!): Membership!
  """Изменить роль участника в организации"""
  updateMemberRole(input: UpdateMemberRoleInput!): Membership!
  """Удалить участника из организации"""
  removeMember(membershipId: UUID!): Boolean!
}
