import type { PrismaClient } from '@prisma/client';
import { createGraphQLLogger } from '@repo/shared-logger';

const logger = createGraphQLLogger('notification-event-handler');

/**
 * Handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Å–æ–±—ã—Ç–∏–π.
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ Notification –∑–∞–ø–∏—Å–∏ (–±–µ–∑ deliveries).
 * Deliveries –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤ notifications-subgraph.
 */
export class NotificationEventHandler {
  constructor(private readonly prisma: PrismaClient) {}
  
  async handle(event: any): Promise<void> {
    try {
      logger.info('Creating notifications for event', { 
        eventId: event.id,
        type: event.type,
        targetUserIds: event.targetUserIds 
      });
      
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const userId of event.targetUserIds || []) {
        await this.createNotificationForUser(event, userId);
      }
      
      logger.info('Notifications created for event', { eventId: event.id });
    } catch (error: any) {
      logger.error('Failed to create notifications', { 
        eventId: event.id,
        error: error.message 
      });
      throw error;
    }
  }
  
  private async createNotificationForUser(event: any, userId: string): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = await this.prisma.userNotificationSettings.findUnique({
        where: { userId }
      });
      
      if (!settings?.enabled) {
        logger.debug('Notifications disabled', { userId });
        return;
      }
      
      if (!settings.subscribedEvents.includes(event.type)) {
        logger.debug('User not subscribed to event', { userId, eventType: event.type });
        return;
      }
      
      // –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { title, message, actionUrl } = this.renderNotification(event);
      
      // –°–æ–∑–¥–∞–µ–º Notification + Deliveries –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const notification = await this.prisma.notification.create({
        data: {
          eventId: event.id,
          userId,
          orgId: event.orgId,
          eventType: event.type,
          title,
          message,
          actionUrl,
          actionText: '–û—Ç–∫—Ä—ã—Ç—å',
          priority: this.determinePriority(event.type) as any,
          status: 'PENDING',
          metadata: JSON.stringify(event.payload),
          
          // –°–æ–∑–¥–∞–µ–º deliveries —Å—Ä–∞–∑—É
          deliveryStatuses: {
            create: this.createDeliveries(settings, userId)
          }
        },
        include: {
          deliveryStatuses: true
        }
      });
      
      logger.info('Notification created with deliveries', { 
        notificationId: notification.id,
        userId,
        eventType: event.type,
        deliveriesCount: notification.deliveryStatuses.length
      });
      
      // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å Event ‚Üê ‚Üí Notification
      await this.prisma.eventNotification.create({
        data: {
          eventId: event.id,
          notificationId: notification.id
        }
      });
      
      logger.info('‚úÖ Event-Notification link created', { 
        eventId: event.id,
        notificationId: notification.id 
      });
      
    } catch (error: any) {
      logger.error('Failed to create notification for user', { 
        userId,
        error: error.message 
      });
    }
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å deliveries –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private createDeliveries(settings: any, userId: string): any[] {
    const deliveries = [];
    
    if (settings.enabledChannels.includes('TELEGRAM') && settings.telegramChatId) {
      deliveries.push({
        channel: 'TELEGRAM',
        recipientType: 'TELEGRAM_CHAT_ID',
        recipientId: settings.telegramChatId,
        status: 'PENDING'
      });
    }
    
    if (settings.enabledChannels.includes('WEBSOCKET')) {
      deliveries.push({
        channel: 'WEBSOCKET',
        recipientType: 'USER_ID',
        recipientId: userId,
        status: 'PENDING'
      });
    }
    
    return deliveries;
  }
  
  private renderNotification(event: any): { title: string; message: string; actionUrl: string } {
    const payload = event.payload;
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    
    switch (event.type) {
      case 'CLEANING_ASSIGNED':
        return {
          title: 'üßπ –ù–æ–≤–∞—è —É–±–æ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!',
          message: `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É–±–æ—Ä–∫–∞ –≤ ${payload.unitName || '–∫–≤–∞—Ä—Ç–∏—Ä–µ'}`,
          actionUrl: `${frontendUrl}/cleanings?cleaning=${payload.cleaningId}`
        };
      
      case 'CLEANING_SCHEDULED':
        return {
          title: 'üìã –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è —É–±–æ—Ä–∫–∞',
          message: `–£–±–æ—Ä–∫–∞ –≤ ${payload.unitName || '–∫–≤–∞—Ä—Ç–∏—Ä–µ'} –∂–¥–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è`,
          actionUrl: `${frontendUrl}/cleanings`
        };
      
      default:
        return {
          title: event.type.replace(/_/g, ' '),
          message: `–°–æ–±—ã—Ç–∏–µ: ${event.type}`,
          actionUrl: frontendUrl
        };
    }
  }
  
  private determinePriority(eventType: string): string {
    switch (eventType) {
      case 'CLEANING_ASSIGNED':
        return 'HIGH';
      case 'CLEANING_STARTED':
        return 'NORMAL';
      case 'CLEANING_COMPLETED':
        return 'LOW';
      default:
        return 'NORMAL';
    }
  }
}

