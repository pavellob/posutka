// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ server.ts
import { createGraphQLLogger } from '@repo/shared-logger';
import {
  createNotificationsGrpcClient,
  type NotificationsGrpcClient,
  EventType,
  Priority,
  NotificationChannel,
} from '@repo/grpc-sdk';

const logger = createGraphQLLogger('cleaning-notification-client');

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ notifications-subgraph —á–µ—Ä–µ–∑ gRPC.
 */
export class NotificationClient {
  private readonly grpcClient: NotificationsGrpcClient;
  private readonly frontendUrl: string;
  private connected = false;
  
  constructor(
    grpcHost: string = process.env.NOTIFICATIONS_GRPC_HOST || 'localhost',
    grpcPort: number = parseInt(process.env.NOTIFICATIONS_GRPC_PORT || '4111'),
    frontendUrl?: string
  ) {
    this.frontendUrl = frontendUrl || process.env.FRONTEND_URL || 'http://localhost:3000';
    
    this.grpcClient = createNotificationsGrpcClient({
      host: grpcHost,
      port: grpcPort,
      retryAttempts: 3,
      retryDelay: 1000,
      timeout: 10000,
    });
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    this.connect();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info('NotificationClient initialized (gRPC)', {
      grpcHost,
      grpcPort,
      frontendUrl: this.frontendUrl,
      envFrontendUrl: process.env.FRONTEND_URL,
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPS –¥–ª—è production
    if (process.env.NODE_ENV === 'production' && this.frontendUrl.startsWith('http://')) {
      logger.error('‚ùå CRITICAL: FRONTEND_URL uses HTTP in production!');
      logger.error('‚ùå Telegram Web App requires HTTPS links');
      logger.error(`‚ùå Current FRONTEND_URL: ${this.frontendUrl}`);
      logger.error('üí° Set FRONTEND_URL to your production HTTPS URL in Northflank Environment Variables');
      logger.error('üí° Example: https://posutka-backoffice.vercel.app');
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è localhost
    if (this.frontendUrl.includes('localhost')) {
      logger.warn('‚ö†Ô∏è  FRONTEND_URL uses localhost - links will not work in production!');
      logger.warn(`‚ö†Ô∏è  Current: ${this.frontendUrl}`);
      logger.warn('üí° For production set FRONTEND_URL in Northflank Environment Variables');
    }
  }
  
  private async connect(): Promise<void> {
    try {
      await this.grpcClient.connect();
      this.connected = true;
      logger.info('NotificationClient connected to gRPC server');
    } catch (error) {
      logger.error('Failed to connect NotificationClient to gRPC server', error);
    }
  }
  
  private async ensureConnected(): Promise<void> {
    if (!this.connected) {
      await this.connect();
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.
   */
  private getFrontendUrl(path: string): string {
    return `${this.frontendUrl}${path}`;
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏.
   */
  async notifyCleaningAssigned(params: {
    userId: string;
    telegramChatId?: string;
    cleanerId: string;
    cleaningId: string;
    unitName: string;
    scheduledAt: string;
    requiresLinenChange: boolean;
    orgId?: string;
  }): Promise<void> {
    try {
      await this.ensureConnected();
      
      const { userId, telegramChatId, unitName, scheduledAt, requiresLinenChange, cleaningId, orgId } = params;
      
      const scheduledDate = new Date(scheduledAt);
      const formattedDate = scheduledDate.toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ userId - notifications-subgraph —Å–∞–º –Ω–∞–π–¥—ë—Ç telegramChatId –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const recipientIds = [userId];
      const channels = [NotificationChannel.CHANNEL_TELEGRAM, NotificationChannel.CHANNEL_WEBSOCKET];
      
      const response = await this.grpcClient.sendNotification({
        eventType: EventType.EVENT_TYPE_CLEANING_ASSIGNED,
        orgId,
        recipientIds,
        channels,
        priority: Priority.PRIORITY_HIGH,
        title: 'üßπ –ù–æ–≤–∞—è —É–±–æ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!',
        message: `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É–±–æ—Ä–∫–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ "${unitName}"\n\n–î–∞—Ç–∞: ${formattedDate}${requiresLinenChange ? '\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è' : ''}`,
        metadata: JSON.stringify({
          cleaningId,
          unitName,
          scheduledAt,
          requiresLinenChange,
        }),
        actionUrl: this.getFrontendUrl(`/cleanings/${cleaningId}?tab=checklist`),
        actionText: '‚úÖ –û—Ç–∫—Ä—ã—Ç—å —á–µ–∫–ª–∏—Å—Ç',
      });
      
      logger.info('Cleaning assigned notification sent via gRPC', { 
        cleaningId, 
        userId, 
        hasTelegram: !!telegramChatId,
        notificationId: response.notificationId,
        status: response.status,
        eventType: EventType.EVENT_TYPE_CLEANING_ASSIGNED,
        orgId,
        recipientIds,
        channels,
        priority: Priority.PRIORITY_HIGH,
        title: 'üßπ –ù–æ–≤–∞—è —É–±–æ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!',
        message: `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É–±–æ—Ä–∫–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ "${unitName}"\n\n–î–∞—Ç–∞: ${formattedDate}${requiresLinenChange ? '\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è' : ''}`,
        metadata: JSON.stringify({
          cleaningId,
          unitName,
          scheduledAt,
          requiresLinenChange,
        }),
        actionUrl: this.getFrontendUrl(`/cleanings/${cleaningId}?tab=checklist`),
        actionText: '‚úÖ –û—Ç–∫—Ä—ã—Ç—å —á–µ–∫–ª–∏—Å—Ç',
      });
    } catch (error) {
      logger.error('Failed to send cleaning assigned notification:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π flow
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —É–±–æ—Ä–∫–∏.
   */
  async notifyCleaningStarted(params: {
    userId: string;
    telegramChatId?: string;
    cleaningId: string;
    unitName: string;
    cleanerName: string;
  }): Promise<void> {
    try {
      await this.ensureConnected();
      
      const { userId, telegramChatId, cleaningId, unitName, cleanerName } = params;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ userId - notifications-subgraph —Å–∞–º –Ω–∞–π–¥—ë—Ç telegramChatId
      const recipientIds = [userId];
      const channels = [NotificationChannel.CHANNEL_TELEGRAM, NotificationChannel.CHANNEL_WEBSOCKET];
      
      const response = await this.grpcClient.sendNotification({
        eventType: EventType.EVENT_TYPE_CLEANING_STARTED,
        recipientIds,
        channels,
        priority: Priority.PRIORITY_NORMAL,
        title: '‚ñ∂Ô∏è –í—ã –Ω–∞—á–∞–ª–∏ —É–±–æ—Ä–∫—É',
        message: `–í—ã –Ω–∞—á–∞–ª–∏ —É–±–æ—Ä–∫—É –≤ "${unitName}"\n\n‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}\n\nüí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–±–æ—Ä–∫—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É–Ω–∫—Ç–æ–≤ —á–µ–∫–ª–∏—Å—Ç–∞`,
        metadata: JSON.stringify({
          cleaningId,
          startedAt: new Date().toISOString(),
        }),
        actionUrl: this.getFrontendUrl(`/cleanings/${cleaningId}?tab=checklist`),
        actionText: '‚úÖ –ö —á–µ–∫–ª–∏—Å—Ç—É',
      });
      
      logger.info('Cleaning started notification sent via gRPC', { 
        cleaningId, 
        userId,
        notificationId: response.notificationId
      });
    } catch (error) {
      logger.error('Failed to send cleaning started notification:', error);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–∫–∏.
   */
  async notifyCleaningCompleted(params: {
    userId: string;
    telegramChatId?: string;
    cleaningId: string;
    unitName: string;
    cleanerName: string;
    duration?: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  }): Promise<void> {
    try {
      await this.ensureConnected();
      
      const { userId, telegramChatId, cleaningId, unitName, cleanerName, duration } = params;
      
      let message = `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É–±–æ—Ä–∫—É –≤ "${unitName}"`;
      
      if (duration) {
        const hours = Math.floor(duration / 60);
        const minutes = duration % 60;
        message += `\n\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${hours > 0 ? `${hours}—á ` : ''}${minutes}–º–∏–Ω`;
      }
      
      message += '\n\n‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!';
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ userId - notifications-subgraph —Å–∞–º –Ω–∞–π–¥—ë—Ç telegramChatId
      const recipientIds = [userId];
      const channels = [NotificationChannel.CHANNEL_TELEGRAM, NotificationChannel.CHANNEL_WEBSOCKET];
      
      const response = await this.grpcClient.sendNotification({
        eventType: EventType.EVENT_TYPE_CLEANING_COMPLETED,
        recipientIds,
        channels,
        priority: Priority.PRIORITY_NORMAL,
        title: '‚úÖ –£–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        message,
        metadata: JSON.stringify({
          cleaningId,
          completedAt: new Date().toISOString(),
          duration,
        }),
        actionUrl: this.getFrontendUrl(`/cleanings/${cleaningId}`),
        actionText: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç ‚Üí',
      });
      
      logger.info('Cleaning completed notification sent via gRPC', { 
        cleaningId, 
        userId,
        notificationId: response.notificationId
      });
    } catch (error) {
      logger.error('Failed to send cleaning completed notification:', error);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ —É–±–æ—Ä–∫–∏.
   */
  async notifyCleaningCancelled(params: {
    userId: string;
    telegramChatId?: string;
    cleaningId: string;
    unitName: string;
    reason?: string;
  }): Promise<void> {
    try {
      await this.ensureConnected();
      
      const { userId, telegramChatId, cleaningId, unitName, reason } = params;
      
      let message = `–£–±–æ—Ä–∫–∞ –≤ "${unitName}" –æ—Ç–º–µ–Ω–µ–Ω–∞`;
      
      if (reason) {
        message += `\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ userId - notifications-subgraph —Å–∞–º –Ω–∞–π–¥—ë—Ç telegramChatId
      const recipientIds = [userId];
      const channels = [NotificationChannel.CHANNEL_TELEGRAM, NotificationChannel.CHANNEL_WEBSOCKET];
      
      const response = await this.grpcClient.sendNotification({
        eventType: EventType.EVENT_TYPE_CLEANING_CANCELLED,
        recipientIds,
        channels,
        priority: Priority.PRIORITY_NORMAL,
        title: '‚ùå –£–±–æ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        message,
        metadata: JSON.stringify({
          cleaningId,
          reason,
          cancelledAt: new Date().toISOString(),
        }),
      });
      
      logger.info('Cleaning cancelled notification sent via gRPC', { 
        cleaningId, 
        userId,
        notificationId: response.notificationId
      });
    } catch (error) {
      logger.error('Failed to send cleaning cancelled notification:', error);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —É–±–æ—Ä–∫–µ (–¥–ª—è —Å–∞–º–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è).
   */
  async notifyCleaningAvailable(params: {
    userId: string;
    telegramChatId?: string;
    cleaningId: string;
    unitName: string;
    scheduledAt: string;
    requiresLinenChange: boolean;
    orgId?: string;
  }): Promise<void> {
    try {
      await this.ensureConnected();
      
      const { userId, telegramChatId, unitName, scheduledAt, requiresLinenChange, cleaningId, orgId } = params;
      
      const scheduledDate = new Date(scheduledAt);
      const formattedDate = scheduledDate.toLocaleString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ userId - notifications-subgraph —Å–∞–º –Ω–∞–π–¥—ë—Ç telegramChatId
      const recipientIds = [userId];
      const channels = [NotificationChannel.CHANNEL_TELEGRAM, NotificationChannel.CHANNEL_WEBSOCKET];
      
      const response = await this.grpcClient.sendNotification({
        eventType: EventType.EVENT_TYPE_CLEANING_AVAILABLE,
        orgId,
        recipientIds,
        channels,
        priority: Priority.PRIORITY_HIGH,
        title: 'üÜì –î–æ—Å—Ç—É–ø–Ω–∞ —É–±–æ—Ä–∫–∞!',
        message: `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É–±–æ—Ä–∫–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ "${unitName}"\n\n–î–∞—Ç–∞: ${formattedDate}${requiresLinenChange ? '\n\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–º–µ–Ω–∞ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è' : ''}\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —É–±–æ—Ä–∫—É –≤ —Ä–∞–±–æ—Ç—É`,
        metadata: JSON.stringify({
          cleaningId,
          unitName,
          scheduledAt,
          requiresLinenChange,
        }),
        actionUrl: this.getFrontendUrl(`/cleanings/${cleaningId}?action=assign`),
        actionText: 'üéØ –í–∑—è—Ç—å —É–±–æ—Ä–∫—É',
      });
      
      logger.info('Cleaning available notification sent via gRPC', { 
        cleaningId, 
        userId, 
        hasTelegram: !!telegramChatId,
        notificationId: response.notificationId,
        status: response.status,
      });
    } catch (error) {
      logger.error('Failed to send cleaning available notification:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π flow
    }
  }
  
  /**
   * –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç gRPC —Å–µ—Ä–≤–µ—Ä–∞.
   */
  async disconnect(): Promise<void> {
    try {
      await this.grpcClient.disconnect();
      this.connected = false;
      logger.info('NotificationClient disconnected from gRPC server');
    } catch (error) {
      logger.error('Failed to disconnect NotificationClient', error);
    }
  }
}

// Singleton instance
export const notificationClient = new NotificationClient();
