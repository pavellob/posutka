import TelegramBot from 'node-telegram-bot-api';
import { createGraphQLLogger } from '@repo/shared-logger';
import {
  BaseNotificationProvider,
  Channel,
  type NotificationMessage,
  type DeliveryResult,
} from './base-provider.js';

const logger = createGraphQLLogger('telegram-provider');

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.
 */
export class TelegramProvider extends BaseNotificationProvider {
  readonly channel = Channel.TELEGRAM;
  readonly name = 'Telegram';
  
  private bot: TelegramBot | null = null;
  private readonly token: string;
  
  constructor(token: string) {
    super();
    this.token = token;
  }
  
  async initialize(): Promise<void> {
    try {
      logger.info('Initializing Telegram bot...');
      
      const usePolling = process.env.TELEGRAM_POLLING === 'true';
      this.bot = new TelegramBot(this.token, { polling: usePolling });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const me = await this.bot.getMe();
      logger.info(`Telegram bot initialized: @${me.username} (polling: ${usePolling})`);
      
      await super.initialize();
    } catch (error) {
      logger.error('Failed to initialize Telegram bot:', error);
      throw error;
    }
  }
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–∏–≤—è–∑–∫–∏ —É–±–æ—Ä—â–∏–∫–æ–≤.
   * @param onStartCallback - Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start (–ø–æ–ª—É—á–∞–µ—Ç username –∏ chatId)
   */
  setupCommandHandlers(onStartCallback?: (username: string | undefined, chatId: string, firstName: string, lastName: string) => Promise<void>) {
    if (!this.bot) {
      logger.error('Bot not initialized, cannot setup command handlers');
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id.toString();
      const username = msg.from?.username;
      const firstName = msg.from?.first_name || '';
      const lastName = msg.from?.last_name || '';
      
      logger.info(`Received /start from: ${username || 'no_username'} (${chatId})`);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (onStartCallback) {
        await onStartCallback(username, chatId, firstName, lastName);
      }
      
      if (username) {
        await this.bot!.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n` +
          `–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Kakadu.\n\n` +
          `–í–∞—à chat ID: \`${chatId}\`\n` +
          `–í–∞—à username: @${username}\n\n` +
          `–ï—Å–ª–∏ –≤—ã —É–±–æ—Ä—â–∏–∫ –∏ —É–∫–∞–∑–∞–ª–∏ —ç—Ç–æ—Ç username –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, ` +
          `—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É–±–æ—Ä–∫–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`,
          { parse_mode: 'Markdown' }
        );
      } else {
        await this.bot!.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n` +
          `–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Kakadu.\n\n` +
          `–í–∞—à chat ID: \`${chatId}\`\n\n` +
          `‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n` +
          `–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.`,
          { parse_mode: 'Markdown' }
        );
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id.toString();
      await this.bot!.sendMessage(
        chatId,
        `üìñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Kakadu Notifications*\n\n` +
        `*–ö–æ–º–∞–Ω–¥—ã:*\n` +
        `/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–∏—Å—Ç–µ–º–µ\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
        `*–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:*\n` +
        `‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É–±–æ—Ä–∫–∞—Ö\n` +
        `‚Ä¢ –ù–∞—á–∞–ª–µ —É–±–æ—Ä–æ–∫\n` +
        `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–±–æ—Ä–æ–∫\n` +
        `‚Ä¢ –û—Ç–º–µ–Ω–µ —É–±–æ—Ä–æ–∫`,
        { parse_mode: 'Markdown' }
      );
    });
    
    logger.info('Telegram bot command handlers registered');
  }
  
  async send(message: NotificationMessage): Promise<DeliveryResult> {
    this.ensureInitialized();
    
    if (!this.bot) {
      return {
        success: false,
        error: 'Telegram bot not initialized',
      };
    }
    
    try {
      const chatId = message.recipientId;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let text = `<b>${this.escapeHtml(message.title)}</b>\n\n${this.escapeHtml(message.message)}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (message.metadata) {
        text += `\n\n<i>–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:</i>\n`;
        for (const [key, value] of Object.entries(message.metadata)) {
          text += `‚Ä¢ ${this.escapeHtml(key)}: ${this.escapeHtml(String(value))}\n`;
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const options: any = {
        parse_mode: 'HTML',
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (message.actionUrl && message.actionText) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º web_app –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Telegram Mini App
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_USE_MINIAPP=true, –∏—Å–ø–æ–ª—å–∑—É–µ–º web_app
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é url –∫–Ω–æ–ø–∫—É (–¥–ª—è dev/testing)
        const useMiniApp = process.env.TELEGRAM_USE_MINIAPP === 'true';
        
        if (useMiniApp) {
          options.reply_markup = {
            inline_keyboard: [[
              {
                text: message.actionText,
                web_app: { url: message.actionUrl },
              },
            ]],
          };
        } else {
          options.reply_markup = {
            inline_keyboard: [[
              {
                text: message.actionText,
                url: message.actionUrl,
              },
            ]],
          };
        }
      }
      
      const sentMessage = await this.bot.sendMessage(chatId, text, options);
      
      logger.info(`Message sent to Telegram chat ${chatId}`, {
        messageId: sentMessage.message_id,
        notificationId: message.id,
      });
      
      return {
        success: true,
        externalId: String(sentMessage.message_id),
        deliveredAt: new Date(),
      };
    } catch (error) {
      logger.error('Failed to send Telegram message:', error);
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }
  
  async canSend(recipientId: string): Promise<boolean> {
    if (!this.initialized || !this.bot) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ recipientId - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π chat ID
    // Telegram chat ID –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
    return /^-?\d+$/.test(recipientId);
  }
  
  async shutdown(): Promise<void> {
    if (this.bot) {
      await this.bot.stopPolling();
      this.bot = null;
    }
    await super.shutdown();
  }
  
  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram.
   */
  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;');
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π).
   */
  getBot(): TelegramBot | null {
    return this.bot;
  }
}

