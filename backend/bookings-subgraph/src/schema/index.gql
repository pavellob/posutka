# Bookings Subgraph - Управление бронированиями
# Отвечает за создание, изменение и отмену бронирований, управление гостями и расчет цен

"""
Денежная сумма с валютой.
Amount хранится в копейках/центах для точности вычислений.
Пример: {amount: 150000, currency: "RUB"} = 1500.00 RUB
"""
type Money {
  """Сумма в копейках/центах (минимальная единица валюты)"""
  amount: Int!
  """Код валюты в формате ISO 4217 (RUB, USD, EUR)"""
  currency: String!
}

"""
Входные данные для денежной суммы.
Используется в мутациях для создания/обновления денежных значений.
"""
input MoneyInput {
  """Сумма в копейках/центах"""
  amount: Int!
  """Код валюты в формате ISO 4217"""
  currency: String!
}

"""
Информация о пагинации для соединений (connections).
Используется в GraphQL для реализации cursor-based пагинации.
"""
type PageInfo {
  """Есть ли следующая страница результатов"""
  hasNextPage: Boolean!
  """Есть ли предыдущая страница результатов"""
  hasPreviousPage: Boolean!
  """Курсор для начала текущей страницы"""
  startCursor: String
  """Курсор для конца текущей страницы"""
  endCursor: String
  """Общее количество элементов (опционально)"""
  totalCount: Int
}

"""
Действия с депозитом/залогом.
Используется для управления залогами при бронировании.
"""
enum DepositAction {
  """Заблокировать средства на карте гостя"""
  HOLD
  """Разблокировать заблокированные средства"""
  RELEASE
  """Списать средства с карты гостя"""
  CHARGE
  """Подтвердить списание (окончательно)"""
  CAPTURE
  """Вернуть средства гостю"""
  REFUND
}

"""
Статус транзакции в системе.
"""
enum TransactionStatus {
  """Транзакция в процессе обработки"""
  PENDING
  """Транзакция успешно завершена"""
  COMPLETED
  """Транзакция не удалась"""
  FAILED
}

"""
Каналы продаж для бронирований.
Определяет источник бронирования и платформу.
"""
enum Channel {
  """Прямое бронирование через сайт/приложение"""
  DIRECT
  """Бронирование через Airbnb"""
  AIRBNB
  """Бронирование через Booking.com"""
  BOOKING_COM
  """Бронирование через Avito"""
  AVITO
  """Другие каналы продаж"""
  OTHER
}


scalar UUID
scalar DateTime

"""
Запросы для работы с бронированиями.
"""
type Query {
  """Получить бронирование по ID"""
  booking(id: UUID!): Booking
  """Получить список бронирований с фильтрацией и пагинацией"""
  bookings(
    """ID организации для фильтрации"""
    orgId: UUID
    """ID единицы недвижимости для фильтрации"""
    unitId: UUID
    """Начальная дата для фильтрации (включительно)"""
    from: DateTime
    """Конечная дата для фильтрации (включительно)"""
    to: DateTime
    """Статус бронирования для фильтрации"""
    status: BookingStatus
    """Количество элементов на странице"""
    first: Int
    """Курсор для пагинации"""
    after: String
  ): BookingConnection!
}

"""
Мутации для управления бронированиями.
"""
type Mutation {
  """Создать новое бронирование"""
  createBooking(input: CreateBookingInput!): Booking!
  """Отменить бронирование с указанием причины"""
  cancelBooking(id: UUID!, reason: String): Booking!
  """Изменить даты заезда и выезда в бронировании"""
  changeBookingDates(id: UUID!, checkIn: DateTime!, checkOut: DateTime!): Booking!
  # generateContract и depositAction перенесены в legal-subgraph
}

"""
Организация (компания, отель, хостел и т.д.).
Ссылка на основную сущность из identity-subgraph.
"""
type Organization {
  """Уникальный идентификатор организации"""
  id: UUID!
}

"""
Объект недвижимости (здание, комплекс и т.д.).
Ссылка на сущность из inventory-subgraph.
"""
type Property {
  """Уникальный идентификатор объекта недвижимости"""
  id: UUID!
}

"""
Единица недвижимости (номер, квартира, дом и т.д.).
Ссылка на основную сущность из inventory-subgraph.
"""
type Unit {
  """Уникальный идентификатор единицы недвижимости"""
  id: UUID!
}

"""
Бронирование недвижимости.
Представляет зарезервированный период проживания гостя в единице недвижимости.
"""
type Booking {
  """Уникальный идентификатор бронирования"""
  id: UUID!
  """Организация, владеющая недвижимостью"""
  org: Organization!
  """Единица недвижимости, которая забронирована"""
  unit: Unit!
  """Информация о госте"""
  guest: Guest!
  """Текущий статус бронирования"""
  status: BookingStatus!
  """Источник бронирования (канал продаж)"""
  source: BookingSource!
  """Дата и время заезда"""
  checkIn: DateTime!
  """Дата и время выезда"""
  checkOut: DateTime!
  """Количество гостей"""
  guestsCount: Int!
  """Детализация стоимости бронирования"""
  priceBreakdown: PriceBreakdown!
  """Дополнительные заметки к бронированию"""
  notes: String
  """Причина отмены (если бронирование отменено)"""
  cancellationReason: String
  """Дата и время создания бронирования"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
}

"""
Гость - человек, который бронирует недвижимость.
Содержит контактную информацию и документы гостя.
"""
type Guest {
  """Уникальный идентификатор гостя"""
  id: UUID!
  """Полное имя гостя"""
  name: String!
  """Email адрес гостя"""
  email: String!
  """Номер телефона гостя (опционально)"""
  phone: String
  """Тип документа, удостоверяющего личность (опционально)"""
  documentType: String
  """Номер документа (опционально)"""
  documentNumber: String
  """Дата и время создания записи о госте"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
}

# Document и DepositTransaction типы определены в legal-subgraph

"""
Детализация стоимости бронирования.
Разбивает общую стоимость на составляющие.
"""
type PriceBreakdown {
  """Базовая стоимость проживания"""
  basePrice: Money!
  """Стоимость уборки (опционально)"""
  cleaningFee: Money
  """Сервисный сбор (опционально)"""
  serviceFee: Money
  """Налоги (опционально)"""
  taxes: Money
  """Общая стоимость бронирования"""
  total: Money!
}

"""
Сервисный сбор.
Дополнительная плата за услуги платформы.
"""
type ServiceFee {
  """Тип сервисного сбора"""
  type: String!
  """Сумма сбора"""
  amount: Money!
  """Описание сбора (опционально)"""
  description: String
}

"""
Соединение бронирований с пагинацией.
"""
type BookingConnection {
  """Список бронирований с курсорами"""
  edges: [BookingEdge!]!
  """Информация о пагинации"""
  pageInfo: PageInfo!
  """Общее количество бронирований (опционально)"""
  totalCount: Int
}

"""
Элемент списка бронирований для пагинации.
"""
type BookingEdge {
  """Бронирование"""
  node: Booking!
  """Курсор для пагинации"""
  cursor: String!
}


"""
Входные данные для создания бронирования.
"""
input CreateBookingInput {
  """ID организации, владеющей недвижимостью"""
  orgId: UUID!
  """ID единицы недвижимости для бронирования"""
  unitId: UUID!
  """Информация о госте"""
  guest: GuestInput!
  """Дата и время заезда"""
  checkIn: DateTime!
  """Дата и время выезда"""
  checkOut: DateTime!
  """Количество гостей"""
  guestsCount: Int!
  """Детализация стоимости"""
  priceBreakdown: PriceBreakdownInput!
  """Дополнительные заметки (опционально)"""
  notes: String
  """Источник бронирования (опционально, по умолчанию DIRECT)"""
  source: BookingSource
}

"""
Входные данные для информации о госте.
"""
input GuestInput {
  """Полное имя гостя"""
  name: String!
  """Email адрес гостя"""
  email: String!
  """Номер телефона гостя (опционально)"""
  phone: String
  """Тип документа, удостоверяющего личность (опционально)"""
  documentType: String
  """Номер документа (опционально)"""
  documentNumber: String
}

"""
Входные данные для детализации стоимости бронирования.
"""
input PriceBreakdownInput {
  """Базовая стоимость проживания"""
  basePrice: MoneyInput!
  """Стоимость уборки (опционально)"""
  cleaningFee: MoneyInput
  """Сервисный сбор (опционально)"""
  serviceFee: MoneyInput
  """Налоги (опционально)"""
  taxes: MoneyInput
  """Общая стоимость бронирования"""
  total: MoneyInput!
}


"""
Статус бронирования.
Определяет текущее состояние бронирования в жизненном цикле.
"""
enum BookingStatus {
  """Ожидает подтверждения"""
  PENDING
  """Подтверждено и активно"""
  CONFIRMED
  """Отменено"""
  CANCELLED
  """Завершено (гость выехал)"""
  COMPLETED
  """Гость не явился (no-show)"""
  NO_SHOW
}

"""
Источник бронирования.
Определяет канал, через который было создано бронирование.
"""
enum BookingSource {
  """Прямое бронирование через сайт/приложение"""
  DIRECT
  """Бронирование через Airbnb"""
  AIRBNB
  """Бронирование через Booking.com"""
  BOOKING_COM
  """Бронирование через Avito"""
  AVITO
  """Другие каналы продаж"""
  OTHER
}
