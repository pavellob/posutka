# Ops Subgraph - Операционные задачи и сервисы
# Отвечает за управление задачами, поставщиками услуг и заказами на обслуживание

"""
Денежная сумма с валютой.
Amount хранится в копейках/центах для точности вычислений.
Пример: {amount: 150000, currency: "RUB"} = 1500.00 RUB
"""
type Money {
  """Сумма в копейках/центах (минимальная единица валюты)"""
  amount: Int!
  """Код валюты в формате ISO 4217 (RUB, USD, EUR)"""
  currency: String!
}

"""
Входные данные для денежной суммы.
Используется в мутациях для создания/обновления денежных значений.
"""
input MoneyInput {
  """Сумма в копейках/центах"""
  amount: Int!
  """Код валюты в формате ISO 4217"""
  currency: String!
}

"""
Информация о пагинации для соединений (connections).
Используется в GraphQL для реализации cursor-based пагинации.
"""
type PageInfo {
  """Есть ли следующая страница результатов"""
  hasNextPage: Boolean!
  """Есть ли предыдущая страница результатов"""
  hasPreviousPage: Boolean!
  """Курсор для начала текущей страницы"""
  startCursor: String
  """Курсор для конца текущей страницы"""
  endCursor: String
  """Общее количество элементов (опционально)"""
  totalCount: Int
}

"""
Действия с депозитом/залогом.
Используется для управления залогами при бронировании.
"""
enum DepositAction {
  """Заблокировать средства на карте гостя"""
  HOLD
  """Разблокировать заблокированные средства"""
  RELEASE
  """Списать средства с карты гостя"""
  CHARGE
  """Подтвердить списание (окончательно)"""
  CAPTURE
  """Вернуть средства гостю"""
  REFUND
}

"""
Статус транзакции в системе.
"""
enum TransactionStatus {
  """Транзакция в процессе обработки"""
  PENDING
  """Транзакция успешно завершена"""
  COMPLETED
  """Транзакция не удалась"""
  FAILED
}

"""
Каналы продаж для бронирований.
Определяет источник бронирования и платформу.
"""
enum Channel {
  """Прямое бронирование через сайт/приложение"""
  DIRECT
  """Бронирование через Airbnb"""
  AIRBNB
  """Бронирование через Booking.com"""
  BOOKING_COM
  """Бронирование через Avito"""
  AVITO
  """Другие каналы продаж"""
  OTHER
}


scalar UUID
scalar DateTime

"""
Организация (компания, отель, хостел и т.д.).
Ссылка на основную сущность из identity-subgraph.
"""
type Organization {
  """Уникальный идентификатор организации"""
  id: UUID!
}

"""
Единица недвижимости (номер, квартира, дом и т.д.).
Ссылка на основную сущность из inventory-subgraph.
"""
type Unit {
  """Уникальный идентификатор единицы недвижимости"""
  id: UUID!
}

"""
Бронирование недвижимости.
Ссылка на основную сущность из bookings-subgraph.
"""
type Booking {
  """Уникальный идентификатор бронирования"""
  id: UUID!
}

"""
Счет на оплату.
Ссылка на сущность из billing-subgraph.
"""
type Invoice {
  """Уникальный идентификатор счета"""
  id: UUID!
}

"""
Статус задачи.
Определяет текущее состояние выполнения задачи.
"""
enum TaskStatus {
  """Задача создана, ожидает выполнения"""
  TODO
  """Задача в процессе выполнения"""
  IN_PROGRESS
  """Задача выполнена"""
  DONE
  """Задача отменена"""
  CANCELED
}

"""
Тип задачи.
Определяет категорию и характер выполняемой задачи.
"""
enum TaskType {
  """Уборка помещения"""
  CLEANING
  """Заселение гостя"""
  CHECKIN
  """Выселение гостя"""
  CHECKOUT
  """Техническое обслуживание"""
  MAINTENANCE
  """Инвентаризация"""
  INVENTORY
}

"""
Поставщик услуг.
Компания или физическое лицо, предоставляющее услуги по обслуживанию недвижимости.
"""
type ServiceProvider {
  """Уникальный идентификатор поставщика услуг"""
  id: UUID!
  """Название поставщика услуг"""
  name: String!
  """Типы услуг, которые предоставляет поставщик"""
  serviceTypes: [TaskType!]!
  """Рейтинг поставщика (от 1.0 до 5.0, опционально)"""
  rating: Float
  """Контактная информация (телефон, email)"""
  contact: String
  """Дата и время добавления поставщика"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
}

"""
Операционная задача.
Представляет задачу, которую необходимо выполнить для обслуживания недвижимости.
"""
type Task {
  """Уникальный идентификатор задачи"""
  id: UUID!
  """Организация, для которой создана задача"""
  org: Organization!
  """Единица недвижимости, к которой относится задача (опционально)"""
  unit: Unit
  """Бронирование, связанное с задачей (опционально)"""
  booking: Booking
  """Тип задачи"""
  type: TaskType!
  """Текущий статус задачи"""
  status: TaskStatus!
  """Дата и время, к которому должна быть выполнена задача (опционально)"""
  dueAt: DateTime
  """Поставщик услуг, назначенный на задачу (опционально)"""
  assignedTo: ServiceProvider
  """Чек-лист для выполнения задачи"""
  checklist: [String!]!
  """Дата и время создания задачи"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
  """Дополнительные заметки к задаче (опционально)"""
  note: String
}

"""
Заказ на услуги.
Представляет заказ поставщику услуг для выполнения конкретной задачи.
"""
type ServiceOrder {
  """Уникальный идентификатор заказа на услуги"""
  id: UUID!
  """Организация, разместившая заказ"""
  org: Organization!
  """Задача, для которой создан заказ"""
  task: Task!
  """Поставщик услуг, выполняющий заказ (опционально)"""
  provider: ServiceProvider
  """Статус заказа (например, "pending", "confirmed", "completed")"""
  status: String!
  """Стоимость услуг (опционально)"""
  cost: Money
  """Счет на оплату услуг (опционально)"""
  invoice: Invoice
  """Дата и время создания заказа"""
  createdAt: DateTime!
  """Дата и время последнего обновления"""
  updatedAt: DateTime!
  """Дополнительные заметки к заказу (опционально)"""
  notes: String
}


"""
Элемент списка задач для пагинации.
"""
type TaskEdge {
  """Задача"""
  node: Task!
  """Курсор для пагинации"""
  cursor: String!
}

"""
Соединение задач с пагинацией.
"""
type TaskConnection {
  """Список задач с курсорами"""
  edges: [TaskEdge!]!
  """Информация о пагинации"""
  pageInfo: PageInfo!
  """Общее количество задач (опционально)"""
  totalCount: Int
}

"""
Запросы для работы с задачами, заказами и поставщиками услуг.
"""
type Query {
  """Получить задачу по ID"""
  task(id: UUID!): Task
  """Получить список задач с фильтрацией и пагинацией"""
  tasks(
    """ID организации для фильтрации"""
    orgId: UUID!
    """Статус задач для фильтрации (опционально)"""
    status: TaskStatus
    """Тип задач для фильтрации (опционально)"""
    type: TaskType
    """Количество элементов на странице"""
    first: Int
    """Курсор для пагинации"""
    after: String
  ): TaskConnection!
  """Получить заказ на услуги по ID"""
  serviceOrder(id: UUID!): ServiceOrder
  """Получить поставщика услуг по ID"""
  serviceProvider(id: UUID!): ServiceProvider
  """Получить список поставщиков услуг с фильтрацией по типам услуг"""
  serviceProviders(serviceTypes: [TaskType!]): [ServiceProvider!]!
}

"""
Входные данные для создания задачи.
"""
input CreateTaskInput {
  """ID организации, для которой создается задача"""
  orgId: UUID!
  """Тип задачи"""
  type: TaskType!
  """ID единицы недвижимости (опционально)"""
  unitId: UUID
  """ID бронирования (опционально)"""
  bookingId: UUID
  """Дата и время выполнения задачи (опционально)"""
  dueAt: DateTime
  """Чек-лист для выполнения задачи (опционально)"""
  checklist: [String!]
  """Дополнительные заметки (опционально)"""
  note: String
}

"""
Входные данные для назначения задачи.
"""
input AssignTaskInput {
  """ID задачи для назначения"""
  taskId: UUID!
  """ID поставщика услуг (опционально)"""
  providerId: UUID
  """Новый статус задачи (опционально)"""
  status: TaskStatus
  """Дополнительные заметки (опционально)"""
  note: String
}

"""
Входные данные для создания заказа на услуги.
"""
input CreateServiceOrderInput {
  """ID задачи, для которой создается заказ"""
  taskId: UUID!
  """ID поставщика услуг (опционально)"""
  providerId: UUID
  """Стоимость услуг (опционально)"""
  cost: MoneyInput
  """Дополнительные заметки (опционально)"""
  notes: String
}

"""
Входные данные для создания поставщика услуг.
"""
input CreateServiceProviderInput {
  """Название поставщика услуг"""
  name: String!
  """Типы услуг, которые предоставляет поставщик"""
  serviceTypes: [TaskType!]!
  """Рейтинг поставщика (опционально)"""
  rating: Float
  """Контактная информация (опционально)"""
  contact: String
}


"""
Мутации для управления задачами, заказами и поставщиками услуг.
"""
type Mutation {
  """Создать новую задачу"""
  createTask(input: CreateTaskInput!): Task!
  """Назначить задачу поставщику услуг"""
  assignTask(input: AssignTaskInput!): Task!
  """Обновить статус задачи"""
  updateTaskStatus(id: UUID!, status: TaskStatus!): Task!
  """Создать заказ на услуги"""
  createServiceOrder(input: CreateServiceOrderInput!): ServiceOrder!
  """Обновить статус заказа на услуги"""
  updateServiceOrderStatus(id: UUID!, status: String!): ServiceOrder!
  """Создать нового поставщика услуг"""
  createServiceProvider(input: CreateServiceProviderInput!): ServiceProvider!
}
