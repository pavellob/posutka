/**
 * –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API –∫–ª—é—á–æ–º
 */

import { AIOrchestratorService } from '../services/ai-orchestrator.service.js';
import type { AIAdapterConfig } from '@repo/datalayer';

async function testWithRealAPI() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI subgraph —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API\n');

  // –í–∞—à API –∫–ª—é—á
  const OPENAI_API_KEY = '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';

  const orchestrator = new AIOrchestratorService();
  const orgId = '123e4567-e89b-12d3-a456-426614174000';

  try {
    // –¢–µ—Å—Ç 1: –û–±—ã—á–Ω–∞—è AI –∫–æ–º–∞–Ω–¥–∞
    console.log('üìù –¢–µ—Å—Ç 1: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –∫–æ–º–∞–Ω–¥—ã');
    const commandResult = await orchestrator.run(
      orgId,
      '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω',
      { 
        userId: 'user-123', 
        checkIn: '2024-01-15',
        checkOut: '2024-01-20'
      }
    );
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã:', JSON.stringify(commandResult, null, 2));
    console.log('');

    // –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º API
    console.log('üìù –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–∞ —Å OpenAI');
    const queryResult = await orchestrator.generateGraphQLQuery(
      orgId,
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ò–≤–∞–Ω" –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      {
        type: 'openai',
        apiKey: OPENAI_API_KEY,
        model: 'gpt-4'
      },
      {
        availableTypes: ['User', 'Booking', 'Organization'],
        includeRelations: true
      }
    );
    
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', JSON.stringify(queryResult, null, 2));
    console.log('');

    // –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (queryResult.success && queryResult.query) {
      console.log('üìù –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞');
      const executionResult = await orchestrator.executeGeneratedQuery(
        orgId,
        queryResult.query,
        queryResult.variables
      );
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', JSON.stringify(executionResult, null, 2));
    }

    // –¢–µ—Å—Ç 4: –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    console.log('\nüìù –¢–µ—Å—Ç 4: –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
    const complexQueryResult = await orchestrator.generateGraphQLQuery(
      orgId,
      '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π',
      {
        type: 'openai',
        apiKey: OPENAI_API_KEY,
        model: 'gpt-4'
      },
      {
        dateRange: 'last_month',
        includeDetails: true,
        availableTypes: ['Booking', 'User', 'Organization', 'Room']
      }
    );
    
    console.log('‚úÖ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å:', JSON.stringify(complexQueryResult, null, 2));

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
    
    if (error instanceof Error) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      console.error('–°—Ç–µ–∫:', error.stack);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function testQueryGeneration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n');

  const OPENAI_API_KEY = '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';
  
  const orchestrator = new AIOrchestratorService();
  const orgId = '123e4567-e89b-12d3-a456-426614174000';

  const testQueries = [
    '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
    '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
    '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email',
    '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'
  ];

  for (const [index, query] of testQueries.entries()) {
    console.log(`üìù –¢–µ—Å—Ç ${index + 1}: "${query}"`);
    
    try {
      const result = await orchestrator.generateGraphQLQuery(
        orgId,
        query,
        {
          type: 'openai',
          apiKey: OPENAI_API_KEY,
          model: 'gpt-4'
        }
      );
      
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç ${index + 1}:`, {
        success: result.success,
        query: result.query?.substring(0, 100) + '...',
        hasVariables: !!result.variables,
        error: result.error
      });
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${index + 1}:`, error);
    }
    
    console.log('');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  const testType = process.argv[2] || 'full';
  
  if (testType === 'queries') {
    testQueryGeneration().catch(console.error);
  } else {
    testWithRealAPI().catch(console.error);
  }
}

export { testWithRealAPI, testQueryGeneration };
