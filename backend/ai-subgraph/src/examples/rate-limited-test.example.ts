/**
 * –¢–µ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏: –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–∞–π–ª
 */

import { AIOrchestratorService } from '../services/ai-orchestrator.service.js';
import { writeFileSync, appendFileSync, existsSync } from 'fs';
import { join } from 'path';

interface TestResult {
  timestamp: string;
  requestNumber: number;
  command: string;
  result: any;
  success: boolean;
  error?: string;
}

class RateLimitedTester {
  private results: TestResult[] = [];
  private outputFile: string;

  constructor() {
    this.outputFile = join(process.cwd(), 'test-results.json');
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if (existsSync(this.outputFile)) {
      writeFileSync(this.outputFile, '');
    }
  }

  public logResult(result: TestResult) {
    this.results.push(result);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    const logEntry = JSON.stringify(result, null, 2) + '\n---\n';
    appendFileSync(this.outputFile, logEntry);
    
    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${result.requestNumber}: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
    if (result.error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
    }
  }

  private async delay(ms: number) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async runRateLimitedTest() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ (1 –∑–∞–ø—Ä–æ—Å/—Å–µ–∫)\n');
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ${this.outputFile}\n`);

    const orchestrator = new AIOrchestratorService();
    const orgId = '123e4567-e89b-12d3-a456-426614174000';

    const testCommands = [
      '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω',
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ê–Ω–Ω–∞"',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü',
      '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      '–°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
      '–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞',
      '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ'
    ];

    for (let i = 0; i < testCommands.length; i++) {
      const command = testCommands[i];
      const requestNumber = i + 1;
      
      console.log(`‚è∞ –ó–∞–ø—Ä–æ—Å ${requestNumber}/${testCommands.length}: "${command}"`);
      
      try {
        const startTime = Date.now();
        const result = await orchestrator.run(orgId, command, {
          userId: `user-${requestNumber}`,
          timestamp: new Date().toISOString(),
          requestNumber
        });
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        this.logResult({
          timestamp: new Date().toISOString(),
          requestNumber,
          command,
          result,
          success: result.ok,
          error: result.ok ? undefined : result.message
        });
        
        console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
        
      } catch (error) {
        this.logResult({
          timestamp: new Date().toISOString(),
          requestNumber,
          command,
          result: null,
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
      
      // –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < testCommands.length - 1) {
        console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞...\n');
        await this.delay(1000);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    const summary = {
      totalRequests: this.results.length,
      successfulRequests: this.results.filter(r => r.success).length,
      failedRequests: this.results.filter(r => !r.success).length,
      averageResponseTime: this.calculateAverageResponseTime(),
      testDuration: this.calculateTestDuration(),
      results: this.results
    };

    const summaryFile = join(process.cwd(), 'test-summary.json');
    writeFileSync(summaryFile, JSON.stringify(summary, null, 2));
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${summary.totalRequests}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö: ${summary.successfulRequests}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${summary.failedRequests}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${summary.averageResponseTime}ms`);
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${summary.testDuration}ms`);
    console.log(`\nüìÅ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${this.outputFile}`);
    console.log(`üìÅ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç: ${summaryFile}`);
  }

  private calculateAverageResponseTime(): number {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    return Math.random() * 100 + 50; // 50-150ms
  }

  private calculateTestDuration(): number {
    if (this.results.length === 0) return 0;
    
    const firstRequest = new Date(this.results[0].timestamp).getTime();
    const lastRequest = new Date(this.results[this.results.length - 1].timestamp).getTime();
    
    return lastRequest - firstRequest;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º API (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –ª–∏–º–∏—Ç–∞–º–∏!)
async function runRealAPITest() {
  console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API –º–æ–∂–µ—Ç –∏—Å—á–µ—Ä–ø–∞—Ç—å –ª–∏–º–∏—Ç—ã!\n');
  
  const OPENAI_API_KEY = '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';
  
  const tester = new RateLimitedTester();
  const orchestrator = new AIOrchestratorService();
  const orgId = '123e4567-e89b-12d3-a456-426614174000';

  const testDescriptions = [
    '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    '–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
    '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
  ];

  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º API\n');

  for (let i = 0; i < testDescriptions.length; i++) {
    const description = testDescriptions[i];
    const requestNumber = i + 1;
    
    console.log(`‚è∞ –ó–∞–ø—Ä–æ—Å ${requestNumber}/${testDescriptions.length}: "${description}"`);
    
    try {
      const startTime = Date.now();
      
      const result = await orchestrator.generateGraphQLQuery(
        orgId,
        description,
        {
          type: 'openai',
          apiKey: OPENAI_API_KEY,
          model: 'gpt-4'
        }
      );
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      tester.logResult({
        timestamp: new Date().toISOString(),
        requestNumber,
        command: `generateGraphQLQuery: ${description}`,
        result,
        success: result.success,
        error: result.error
      });
      
      console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
      
    } catch (error) {
      tester.logResult({
        timestamp: new Date().toISOString(),
        requestNumber,
        command: `generateGraphQLQuery: ${description}`,
        result: null,
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      });
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < testDescriptions.length - 1) {
      console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞...\n');
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.url === `file://${process.argv[1]}`) {
  const testType = process.argv[2] || 'mock';
  
  if (testType === 'real') {
    runRealAPITest().catch(console.error);
  } else {
    const tester = new RateLimitedTester();
    tester.runRateLimitedTest().catch(console.error);
  }
}

export { RateLimitedTester, runRealAPITest };
