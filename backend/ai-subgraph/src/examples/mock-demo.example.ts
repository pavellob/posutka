/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Subgraph —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤)
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
 */

import { AIOrchestratorService } from '../services/ai-orchestrator.service.js';
import type { AIAdapterConfig } from '@repo/datalayer';

// –ú–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class MockGQLPTService {
  private mockQueries = [
    {
      description: '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      query: 'query { users { id name email } }',
      variables: null,
      success: true
    },
    {
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
      query: 'query($date: String!) { bookings(where: { checkIn: { equals: $date } }) { id guestName checkIn checkOut } }',
      variables: { date: '2024-01-15' },
      success: true
    },
    {
      description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      query: 'mutation($input: CreateBookingInput!) { createBooking(input: $input) { id guestName checkIn checkOut } }',
      variables: { input: { guestName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', checkIn: '2024-01-15', checkOut: '2024-01-20' } },
      success: true
    },
    {
      description: '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email',
      query: 'query($email: String!) { users(where: { email: { equals: $email } }) { id name email } }',
      variables: { email: 'ivan@example.com' },
      success: true
    },
    {
      description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π',
      query: 'query { bookings { id totalPrice } stats: _count { bookings } }',
      variables: null,
      success: true
    }
  ];

  async generateQuery(description: string): Promise<any> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const mockQuery = this.mockQueries.find(q => 
      q.description.toLowerCase().includes(description.toLowerCase().split(' ')[0])
    ) || this.mockQueries[0];

    return {
      query: mockQuery.query,
      variables: mockQuery.variables,
      description: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è: ${description}`,
      success: mockQuery.success,
      error: null
    };
  }
}

async function demonstrateWithMockData() {
  console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Subgraph —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏\n');

  const orchestrator = new AIOrchestratorService();
  const orgId = '123e4567-e89b-12d3-a456-426614174000';

  try {
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: AI –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ API)
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: AI –∫–æ–º–∞–Ω–¥—ã\n');
    
    const commands = [
      '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω',
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ê–Ω–Ω–∞"',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü',
      '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
    ];

    for (const [index, command] of commands.entries()) {
      console.log(`üîπ –ö–æ–º–∞–Ω–¥–∞ ${index + 1}: "${command}"`);
      
      const result = await orchestrator.run(orgId, command, {
        userId: `user-${index + 1}`,
        timestamp: new Date().toISOString()
      });
      
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.ok ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      console.log(`   üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
      console.log(`   üéØ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ ID: ${result.affectedIds.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      if (result.preview) {
        console.log(`   üëÅÔ∏è  –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: ${JSON.stringify(result.preview).substring(0, 100)}...`);
      }
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)\n');
    
    const mockService = new MockGQLPTService();
    
    const queryDescriptions = [
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      '–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
      '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'
    ];

    for (const [index, description] of queryDescriptions.entries()) {
      console.log(`üîπ –ó–∞–ø—Ä–æ—Å ${index + 1}: "${description}"`);
      
      const result = await mockService.generateQuery(description);
      
      console.log(`   üìÑ GraphQL: ${result.query}`);
      console.log(`   üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${result.variables ? JSON.stringify(result.variables) : '–ù–µ—Ç'}`);
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}`);
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤\n');
    
    const testQueries = [
      { query: 'query { users { id name } }', variables: null },
      { query: 'query($limit: Int!) { bookings(limit: $limit) { id checkIn } }', variables: { limit: 5 } },
      { query: 'mutation { createBooking(input: { userId: "123" }) { id } }', variables: null }
    ];

    for (const [index, { query, variables }] of testQueries.entries()) {
      console.log(`üîπ –ó–∞–ø—Ä–æ—Å ${index + 1}: ${query.substring(0, 50)}...`);
      
      const result = await orchestrator.executeGeneratedQuery(orgId, query, variables || undefined);
      
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result, null, 2).substring(0, 150)}...`);
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n');
    
    console.log('üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:');
    console.log('   ‚Ä¢ OpenAI GPT-4, GPT-3.5-turbo');
    console.log('   ‚Ä¢ Anthropic Claude-3 Sonnet, Claude-3 Haiku');
    console.log('');
    
    console.log('üîπ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:');
    console.log('   ‚Ä¢ AI –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ');
    console.log('   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞');
    console.log('   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã');
    console.log('   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤');
    console.log('   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    console.log('');

    console.log('üîπ –õ–∏–º–∏—Ç—ã API (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):');
    console.log('   ‚Ä¢ OpenAI Free: $5 –∫—Ä–µ–¥–∏—Ç–æ–≤, 3 –∑–∞–ø—Ä–æ—Å–∞/–º–∏–Ω, 150 –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å');
    console.log('   ‚Ä¢ OpenAI Paid: –æ—Ç $20/–º–µ—Å—è—Ü, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞–Ω–∞');
    console.log('   ‚Ä¢ Anthropic: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞–Ω–∞');
    console.log('');

    console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∑—é–º–µ:');
    console.log('   ‚úÖ AI –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
    console.log('   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è');
    console.log('   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ API
function showAPILimits() {
  console.log('üìä –õ–∏–º–∏—Ç—ã API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤\n');
  
  console.log('üîπ OpenAI:');
  console.log('   Free Tier:');
  console.log('   ‚Ä¢ $5 –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  console.log('   ‚Ä¢ 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç—É');
  console.log('   ‚Ä¢ 150 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å');
  console.log('   ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç 3 –º–µ—Å—è—Ü–∞');
  console.log('');
  console.log('   Paid Plans:');
  console.log('   ‚Ä¢ $20/–º–µ—Å—è—Ü - 500,000 —Ç–æ–∫–µ–Ω–æ–≤');
  console.log('   ‚Ä¢ $60/–º–µ—Å—è—Ü - 1,500,000 —Ç–æ–∫–µ–Ω–æ–≤');
  console.log('   ‚Ä¢ Rate limits –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–ª–∞–Ω–∞');
  console.log('');

  console.log('üîπ Anthropic:');
  console.log('   ‚Ä¢ Claude-3 Sonnet: $3/1M input, $15/1M output');
  console.log('   ‚Ä¢ Claude-3 Haiku: $0.25/1M input, $1.25/1M output');
  console.log('   ‚Ä¢ Rate limits: 5-50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É');
  console.log('');

  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('   ‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω');
  console.log('   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API');
  console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  const mode = process.argv[2] || 'demo';
  
  if (mode === 'limits') {
    showAPILimits();
  } else {
    demonstrateWithMockData().catch(console.error);
  }
}

export { demonstrateWithMockData, showAPILimits };
