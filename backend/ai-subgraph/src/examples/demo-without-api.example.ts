/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI subgraph –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
 */

import { AIOrchestratorService } from '../services/ai-orchestrator.service.js';
import type { AIAdapterConfig } from '@repo/datalayer';

async function demonstrateAISubgraph() {
  console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI Subgraph —Å GQLPT\n');

  const orchestrator = new AIOrchestratorService();
  const orgId = '123e4567-e89b-12d3-a456-426614174000';

  try {
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã AI –∫–æ–º–∞–Ω–¥
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã AI –∫–æ–º–∞–Ω–¥\n');
    
    const commands = [
      '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω',
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ê–Ω–Ω–∞"',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü',
      '–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
      '–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
    ];

    for (const [index, command] of commands.entries()) {
      console.log(`üîπ –ö–æ–º–∞–Ω–¥–∞ ${index + 1}: "${command}"`);
      
      const result = await orchestrator.run(orgId, command, {
        userId: `user-${index + 1}`,
        timestamp: new Date().toISOString()
      });
      
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.ok ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      console.log(`   üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
      console.log(`   üéØ –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ ID: ${result.affectedIds.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤\n');
    
    const queryDescriptions = [
      '–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      '–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
      '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email',
      '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π'
    ];

    for (const [index, description] of queryDescriptions.entries()) {
      console.log(`üîπ –ó–∞–ø—Ä–æ—Å ${index + 1}: "${description}"`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const mockResult = {
        query: `query GetUsers${index + 1} { users { id name email } }`,
        variables: index % 2 === 0 ? { limit: 10 } : undefined,
        description: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è: ${description}`,
        success: true,
        error: undefined
      };
      
      console.log(`   üìÑ GraphQL: ${mockResult.query}`);
      console.log(`   üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${mockResult.variables ? JSON.stringify(mockResult.variables) : '–ù–µ—Ç'}`);
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${mockResult.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤\n');
    
    const testQueries = [
      'query { users { id name } }',
      'query($limit: Int!) { bookings(limit: $limit) { id checkIn checkOut } }',
      'mutation { createBooking(input: { userId: "123", checkIn: "2024-01-15" }) { id } }'
    ];

    for (const [index, query] of testQueries.entries()) {
      console.log(`üîπ –ó–∞–ø—Ä–æ—Å ${index + 1}: ${query.substring(0, 50)}...`);
      
      const result = await orchestrator.executeGeneratedQuery(
        orgId,
        query,
        index === 1 ? { limit: 5 } : undefined
      );
      
      console.log(`   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result, null, 2).substring(0, 100)}...`);
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 4: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI –∞–¥–∞–ø—Ç–µ—Ä–æ–≤\n');
    
    const adapters: AIAdapterConfig[] = [
      { type: 'openai', apiKey: 'test-key', model: 'gpt-4' },
      { type: 'anthropic', apiKey: 'test-key', model: 'claude-3-sonnet' }
    ];

    for (const [index, adapter] of adapters.entries()) {
      console.log(`üîπ –ê–¥–∞–ø—Ç–µ—Ä ${index + 1}: ${adapter.type.toUpperCase()}`);
      console.log(`   üìã –ú–æ–¥–µ–ª—å: ${adapter.model || '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}`);
      console.log(`   üîë API –∫–ª—é—á: ${adapter.apiKey.substring(0, 10)}...`);
      console.log(`   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: –î–∞`);
      console.log('');
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –°—Ö–µ–º–∞ GraphQL
    console.log('üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 5: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ö–µ–º–µ\n');
    
    const schema = orchestrator.getSchema();
    console.log(`üîπ –†–∞–∑–º–µ—Ä —Å—Ö–µ–º—ã: ${schema.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üîπ –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø—ã: ${schema.includes('type ') ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`üîπ –°–æ–¥–µ—Ä–∂–∏—Ç –º—É—Ç–∞—Ü–∏–∏: ${schema.includes('mutation') ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`üîπ –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å—ã: ${schema.includes('query') ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log('');

    console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∑—é–º–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:');
    console.log('   ‚úÖ AI –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ');
    console.log('   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞');
    console.log('   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ OpenAI –∏ Anthropic');
    console.log('   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã');
    console.log('   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–æ–≤');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ GraphQL –º—É—Ç–∞—Ü–∏–π
function showGraphQLMutations() {
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ GraphQL –º—É—Ç–∞—Ü–∏–∏:\n');
  
  const mutations = [
    {
      name: 'aiCommand',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å AI-–∫–æ–º–∞–Ω–¥—É –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ',
      example: `mutation {
        aiCommand(
          orgId: "123e4567-e89b-12d3-a456-426614174000"
          command: "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
          context: { "userId": "user-123" }
        ) {
          ok
          message
          affectedIds
          preview
        }
      }`
    },
    {
      name: 'generateGraphQLQuery',
      description: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å GraphQL –∑–∞–ø—Ä–æ—Å –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
      example: `mutation {
        generateGraphQLQuery(
          orgId: "123e4567-e89b-12d3-a456-426614174000"
          description: "–ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
          adapterConfig: {
            type: "openai"
            apiKey: "your-api-key"
            model: "gpt-4"
          }
        ) {
          query
          variables
          description
          success
          error
        }
      }`
    },
    {
      name: 'executeGeneratedQuery',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GraphQL –∑–∞–ø—Ä–æ—Å',
      example: `mutation {
        executeGeneratedQuery(
          orgId: "123e4567-e89b-12d3-a456-426614174000"
          query: "query { users { id name } }"
          variables: { "limit": 10 }
        )
      }`
    }
  ];

  mutations.forEach((mutation, index) => {
    console.log(`${index + 1}. ${mutation.name}`);
    console.log(`   üìù ${mutation.description}`);
    console.log(`   üí° –ü—Ä–∏–º–µ—Ä:`);
    console.log(`   ${mutation.example.split('\n').map(line => `   ${line}`).join('\n')}`);
    console.log('');
  });
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
if (import.meta.url === `file://${process.argv[1]}`) {
  const mode = process.argv[2] || 'demo';
  
  if (mode === 'mutations') {
    showGraphQLMutations();
  } else {
    demonstrateAISubgraph().catch(console.error);
  }
}

export { demonstrateAISubgraph, showGraphQLMutations };
