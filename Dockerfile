# Multi-stage build –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
FROM node:18-alpine AS base

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pnpm
RUN npm install -g pnpm

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY turbo.json ./
COPY tsconfig.base.json ./
COPY base-schema.gql ./

# –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∫—Ä–∏–ø—Ç—ã
COPY packages/ ./packages/
COPY backend/ ./backend/
COPY scripts/ ./scripts/
COPY docker-entrypoint.sh ./

# –î–æ–±–∞–≤–ª—è–µ–º cache-busting –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤
RUN echo "Scripts updated: $(date)" > /tmp/scripts-version

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
RUN echo "=== Docker Build Debug Info ===" && \
    echo "Current directory: $(pwd)" && \
    echo "Directory contents:" && \
    ls -la && \
    echo "Packages directory:" && \
    ls -la packages/ && \
    echo "Datalayer-prisma directory:" && \
    ls -la packages/datalayer-prisma/ && \
    echo "=== End Debug Info ==="

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN pnpm install --frozen-lockfile

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Prisma –∫–ª–∏–µ–Ω—Ç
RUN pnpm generate

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN pnpm build

# –ü—Ä–æ–¥–∞–∫—à–Ω —Å—Ç–∞–¥–∏—è
FROM node:18-alpine AS production

WORKDIR /app

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
RUN apk add --no-cache curl openssl

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pnpm –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–±—Ä–∞–∑–µ
RUN npm install -g pnpm

# –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/backend ./backend
# –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ workspace –ø–∞–∫–µ—Ç—ã —è–≤–Ω–æ
COPY --from=base /app/packages/datalayer-prisma/dist ./packages/datalayer-prisma/dist/
COPY --from=base /app/packages/datalayer-prisma/package.json ./packages/datalayer-prisma/
COPY --from=base /app/packages/datalayer-prisma/node_modules ./packages/datalayer-prisma/node_modules/
COPY --from=base /app/packages/datalayer/dist ./packages/datalayer/dist/
COPY --from=base /app/packages/datalayer/package.json ./packages/datalayer/
COPY --from=base /app/packages/datalayer/node_modules ./packages/datalayer/node_modules/
COPY --from=base /app/packages/shared/dist ./packages/shared/dist/
COPY --from=base /app/packages/shared/package.json ./packages/shared/
COPY --from=base /app/packages/shared/node_modules ./packages/shared/node_modules/
COPY --from=base /app/scripts ./scripts
COPY --from=base /app/docker-entrypoint.sh ./
COPY --from=base /app/base-schema.gql ./
COPY --from=base /app/package.json ./
COPY --from=base /app/pnpm-lock.yaml ./
COPY --from=base /app/turbo.json ./
COPY --from=base /app/tsconfig.base.json ./
COPY --from=base /app/pnpm-workspace.yaml ./

# –î–æ–±–∞–≤–ª—è–µ–º cache-busting –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ç–∞–¥–∏–∏
RUN echo "Production scripts updated: $(date)" > /tmp/prod-scripts-version

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ç–∞–¥–∏–∏
RUN echo "=== Production Build Debug Info ===" && \
    echo "Current directory: $(pwd)" && \
    echo "Directory contents:" && \
    ls -la && \
    echo "Packages directory:" && \
    ls -la packages/ && \
    echo "Datalayer-prisma directory:" && \
    ls -la packages/datalayer-prisma/ && \
    echo "=== End Production Debug Info ==="

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
RUN chmod +x ./scripts/migrate-and-seed.sh
RUN chmod +x ./docker-entrypoint.sh

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
COPY <<EOF ./start.sh
#!/bin/sh

echo "üöÄ –ó–∞–ø—É—Å–∫ Posutka GraphQL Federation..."

# –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–∏–¥—ã
echo "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
./scripts/migrate-and-seed.sh

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ—ã –≤ —Ñ–æ–Ω–µ
echo "üì¶ –ó–∞–ø—É—Å–∫ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤..."
pnpm start:subgraphs &

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤..."
./scripts/wait-for-subgraphs.sh

if [ \$? -eq 0 ]; then
    echo "‚úÖ –ü–æ–¥–≥—Ä–∞—Ñ—ã –≥–æ—Ç–æ–≤—ã!"
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—É–ø–µ—Ä–≥—Ä–∞—Ñ
    echo "üîß –°–±–æ—Ä–∫–∞ —Å—É–ø–µ—Ä–≥—Ä–∞—Ñ–∞..."
    pnpm mesh:compose
    
    if [ \$? -eq 0 ]; then
        echo "‚úÖ –°—É–ø–µ—Ä–≥—Ä–∞—Ñ —Å–æ–±—Ä–∞–Ω!"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º gateway
        echo "üåê –ó–∞–ø—É—Å–∫ Gateway..."
        pnpm start:gateway
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ —Å—É–ø–µ—Ä–≥—Ä–∞—Ñ–∞"
        exit 1
    fi
else
    echo "‚ùå –ü–æ–¥–≥—Ä–∞—Ñ—ã –Ω–µ –≥–æ—Ç–æ–≤—ã"
    exit 1
fi
EOF

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
RUN chmod +x ./start.sh
RUN chmod +x ./scripts/wait-for-subgraphs.sh

# –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç—ã
EXPOSE 4001 4002 4003 4004 4005 4006 4007 4008 4000

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
CMD ["./start.sh"]