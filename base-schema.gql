# Базовая схема для Hive Gateway
# Общие типы и скаляры для всех субграфов

scalar UUID
scalar DateTime
scalar JSON

# Денежные типы
type Money {
  amount: Int!
  currency: String!
}

input MoneyInput {
  amount: Int!
  currency: String!
}

# Пагинация
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
  totalCount: Int
}

# Общие енумы
enum DepositAction {
  HOLD
  RELEASE
  CHARGE
  CAPTURE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum Channel {
  DIRECT
  AIRBNB
  BOOKING_COM
  AVITO
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum BookingSource {
  DIRECT
  AIRBNB
  BOOKING_COM
  AVITO
  OTHER
}

enum Role {
  OWNER
  MANAGER
  STAFF
}

enum AvailabilityStatus {
  AVAILABLE
  BLOCKED
  BOOKED
}

enum InvoiceStatus {
  OPEN
  PAID
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
}

enum PaymentMethod {
  CARD
  CASH
  TRANSFER
  OTHER
}

enum ListingStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

# Дополнительные типы для bookings-subgraph
type Guest {
  id: UUID!
  name: String!
  email: String!
  phone: String
  documentType: String
  documentNumber: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Document {
  id: UUID!
  bookingId: UUID!
  type: String!
  url: String!
  createdAt: DateTime!
  meta: JSON
}

type DepositTransaction {
  id: UUID!
  bookingId: UUID!
  action: DepositAction!
  amount: Money!
  status: TransactionStatus!
  transactionId: String
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PriceBreakdown {
  basePrice: Money!
  cleaningFee: Money
  serviceFee: Money
  taxes: Money
  total: Money!
}

type BookingConnection {
  edges: [BookingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

type Booking {
  id: UUID!
  orgId: UUID!
  unitId: UUID!
  guestId: UUID!
  status: BookingStatus!
  source: BookingSource!
  checkIn: DateTime!
  checkOut: DateTime!
  guestsCount: Int!
  priceBreakdown: PriceBreakdown!
  notes: String
  cancellationReason: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Типы для identity-subgraph
type User {
  id: UUID!
  email: String!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Organization {
  id: UUID!
  name: String!
  timezone: String!
  currency: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Membership {
  id: UUID!
  userId: UUID!
  orgId: UUID!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# Типы для inventory-subgraph
type Property {
  id: UUID!
  orgId: UUID!
  title: String!
  address: String!
  amenities: [String!]!
}

type Unit {
  id: UUID!
  propertyId: UUID!
  name: String!
  capacity: Int!
  beds: Int!
  bathrooms: Int!
  amenities: [String!]!
}

type CalendarDay {
  date: DateTime!
  status: AvailabilityStatus!
  bookingId: UUID
  note: String
}

# Типы для ai-subgraph
type AICommandResult {
  ok: Boolean!
  message: String
  affectedIds: [UUID!]!
  preview: JSON
}

# Типы для billing-subgraph
type InvoiceItem {
  name: String!
  qty: Int!
  price: Money!
  sum: Money!
}

type Invoice {
  id: UUID!
  orgId: UUID!
  orderId: UUID
  items: [InvoiceItem!]!
  total: Money!
  status: InvoiceStatus!
  issuedAt: DateTime!
  dueAt: DateTime
}

type Payment {
  id: UUID!
  invoiceId: UUID!
  method: PaymentMethod!
  amount: Money!
  status: PaymentStatus!
  createdAt: DateTime!
  provider: String
  providerRef: String
  receiptUrl: String
}

type PaymentLink {
  url: String!
  provider: String!
  expiresAt: DateTime
}

type InvoiceConnection {
  edges: [InvoiceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

type InvoiceEdge {
  node: Invoice!
  cursor: String!
}

# Типы для listings-subgraph
type Listing {
  id: UUID!
  unitId: UUID!
  status: ListingStatus!
  channel: Channel!
  basePrice: Money!
  minNights: Int!
  maxNights: Int
  externalId: String
  lastSyncAt: DateTime
}

type DiscountRule {
  id: UUID!
  listingId: UUID!
  name: String!
  percentOff: Int!
  minNights: Int
}

type ListingConnection {
  edges: [ListingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int
}

type ListingEdge {
  node: Listing!
  cursor: String!
}

# Schema Extensions для связывания типов между субграфами

# Расширения для Organization (из identity-subgraph)
extend type Organization {
  # Связь с bookings-subgraph
  bookings: [Booking!]!
    @resolveTo(
      sourceName: "bookings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "bookings"
      requiredSelectionSet: "{ id }"
      sourceArgs: { orgId: "{root.id}" }
    )
  
  # Связь с billing-subgraph
  invoices: [Invoice!]!
    @resolveTo(
      sourceName: "billing-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "invoices"
      requiredSelectionSet: "{ id }"
      sourceArgs: { orgId: "{root.id}" }
    )
  
  # Связь с ops-subgraph
  tasks: [Task!]!
    @resolveTo(
      sourceName: "ops-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "tasks"
      requiredSelectionSet: "{ id }"
      sourceArgs: { orgId: "{root.id}" }
    )
  
  # Связь с inventory-subgraph
  properties: [Property!]!
    @resolveTo(
      sourceName: "inventory-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "propertiesByOrgId"
      requiredSelectionSet: "{ id }"
      sourceArgs: { orgId: "{root.id}" }
    )
}

# Расширения для User (из identity-subgraph)
extend type User {
  # Связь с identity-subgraph для получения организаций пользователя
  organizations: [Organization!]!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organizations"
      requiredSelectionSet: "{ id }"
      sourceArgs: { userId: "{root.id}" }
    )
}

# Расширения для типов из ops-subgraph
extend type Task {
  # Связь с identity-subgraph для получения организации
  org: Organization!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organization"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orgId}" }
    )
  
  # Связь с bookings-subgraph для получения бронирования
  booking: Booking
    @resolveTo(
      sourceName: "bookings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "booking"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.bookingId}" }
    )
    if: "{root.bookingId}"
}

# Расширения для типов из bookings-subgraph
extend type Booking {
  # Связь с identity-subgraph для получения организации
  org: Organization!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organization"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orgId}" }
    )
  
  # Связь с inventory-subgraph для получения юнита
  unit: Unit!
    @resolveTo(
      sourceName: "inventory-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "unit"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.unitId}" }
    )
}

extend type Guest {
  # Связь с bookings-subgraph для получения бронирований гостя
  bookings: [Booking!]!
    @resolveTo(
      sourceName: "bookings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "bookings"
      requiredSelectionSet: "{ id }"
      sourceArgs: { guestId: "{root.id}" }
    )
}

extend type Document {
  # Связь с bookings-subgraph для получения бронирования
  booking: Booking!
    @resolveTo(
      sourceName: "bookings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "booking"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.bookingId}" }
    )
}

extend type DepositTransaction {
  # Связь с bookings-subgraph для получения бронирования
  booking: Booking!
    @resolveTo(
      sourceName: "bookings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "booking"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.bookingId}" }
    )
}

# Расширения для типов из identity-subgraph
extend type User {
  # Связь с identity-subgraph для получения организаций пользователя
  organizations: [Organization!]!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organizationsByUserId"
      requiredSelectionSet: "{ id }"
      sourceArgs: { userId: "{root.id}" }
    )
  
  # Связь с identity-subgraph для получения членств пользователя
  memberships: [Membership!]!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "membershipsByUser"
      requiredSelectionSet: "{ id }"
      sourceArgs: { userId: "{root.id}" }
    )
}

extend type Organization {
  # Связь с identity-subgraph для получения членов организации
  members: [Membership!]!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "membershipsByOrg"
      requiredSelectionSet: "{ id }"
      sourceArgs: { orgId: "{root.id}" }
    )
}

extend type Membership {
  # Связь с identity-subgraph для получения пользователя
  user: User!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "user"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.userId}" }
    )
  
  # Связь с identity-subgraph для получения организации
  organization: Organization!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organization"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orgId}" }
    )
}

# Расширения для типов из inventory-subgraph
extend type Property {
  # Связь с identity-subgraph для получения организации
  org: Organization!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organization"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orgId}" }
    )
  
  # Связь с inventory-subgraph для получения юнитов
  units: [Unit!]!
    @resolveTo(
      sourceName: "inventory-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "unitsByPropertyId"
      requiredSelectionSet: "{ id }"
      sourceArgs: { propertyId: "{root.id}" }
    )
}

extend type Unit {
  # Связь с inventory-subgraph для получения свойства
  property: Property!
    @resolveTo(
      sourceName: "inventory-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "property"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.propertyId}" }
    )
  
  # Связь с bookings-subgraph для получения бронирований
  bookings: [Booking!]!
    @resolveTo(
      sourceName: "bookings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "bookings"
      requiredSelectionSet: "{ id }"
      sourceArgs: { unitId: "{root.id}" }
    )
  
  # Связь с listings-subgraph для получения объявлений
  listings: [Listing!]!
    @resolveTo(
      sourceName: "listings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "listings"
      requiredSelectionSet: "{ id }"
      sourceArgs: { unitId: "{root.id}" }
    )
}

# Расширения для типов из listings-subgraph
extend type Listing {
  # Связь с inventory-subgraph для получения юнита
  unit: Unit!
    @resolveTo(
      sourceName: "inventory-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "unit"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.unitId}" }
    )
  
  # Связь с listings-subgraph для получения правил скидок
  discounts: [DiscountRule!]!
    @resolveTo(
      sourceName: "listings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "listing"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.id}" }
    )
}

extend type DiscountRule {
  # Связь с listings-subgraph для получения объявления
  listing: Listing!
    @resolveTo(
      sourceName: "listings-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "listing"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.listingId}" }
    )
}

# Расширения для типов из legal-subgraph
extend type Booking {
  # Связь с legal-subgraph для получения документов
  documents: [Document!]!
    @resolveTo(
      sourceName: "legal-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "documentsByBookingId"
      requiredSelectionSet: "{ id }"
      sourceArgs: { bookingId: "{root.id}" }
    )
  
  # Связь с legal-subgraph для получения депозитных транзакций
  depositTransactions: [DepositTransaction!]!
    @resolveTo(
      sourceName: "legal-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "depositTransactionsByBookingId"
      requiredSelectionSet: "{ id }"
      sourceArgs: { bookingId: "{root.id}" }
    )
}

extend type ServiceOrder {
  # Связь с identity-subgraph для получения организации
  org: Organization!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organization"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orgId}" }
    )
  
  # Связь с billing-subgraph для получения инвойса
  invoice: Invoice
    @resolveTo(
      sourceName: "billing-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "invoiceByOrderId"
      requiredSelectionSet: "{ id }"
      sourceArgs: { orderId: "{root.id}" }
    )
}

# Расширения для типов из billing-subgraph
extend type Invoice {
  # Связь с identity-subgraph для получения организации
  org: Organization!
    @resolveTo(
      sourceName: "identity-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "organization"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orgId}" }
    )
  
  # Связь с ops-subgraph для получения заказа
  order: ServiceOrder
    @resolveTo(
      sourceName: "ops-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "serviceOrder"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.orderId}" }
    )
    if: "{root.orderId}"
}

extend type Payment {
  # Связь с billing-subgraph для получения инвойса
  invoice: Invoice!
    @resolveTo(
      sourceName: "billing-subgraph"
      sourceTypeName: "Query"
      sourceFieldName: "invoice"
      requiredSelectionSet: "{ id }"
      sourceArgs: { id: "{root.invoiceId}" }
    )
}

# Дополнительные запросы для удобства
extend type Query {
  # Получить все данные организации одним запросом
  organizationWithDetails(id: UUID!): Organization
  
  # Получить все данные пользователя одним запросом
  userWithDetails(id: UUID!): User
}

# Расширения для Mutation
extend type Mutation {
  # AI команды через ai-subgraph
  aiCommand(orgId: UUID!, command: String!, context: JSON): AICommandResult!
    @resolveTo(
      sourceName: "ai-subgraph"
      sourceTypeName: "Mutation"
      sourceFieldName: "aiCommand"
      requiredSelectionSet: "{ ok message affectedIds preview }"
      sourceArgs: { orgId: "{args.orgId}", command: "{args.command}", context: "{args.context}" }
    )
}